// Copyright (c) haydn paterson (sinclair) 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../../modules/Module.ts" />
/// <reference path="IRouter.ts" />
/// <reference path="ModuleGenericRoute.ts" />
/// <reference path="ModuleIndexRoute.ts" />
/// <reference path="ModuleJsonRoute.ts" />
/// <reference path="ModuleWildcardRoute.ts" />

module appex.web.routing {

    export class ModuleRouter implements appex.web.routing.IRouter {
        
        public routes : appex.web.routing.IRoute[];

        constructor(public module:appex.modules.Module) {
            
            this.routes = [];

            this.initialize();
        }
        
        public handler( context : any, request:http.ServerRequest, response:http.ServerResponse, next?:() => void) : boolean {

            for(var n in this.routes) {
            
                var route = <appex.web.routing.IRoute>this.routes[n];

                if(route.match(request)) {

                    return route.handler(context, request, response, next);
                }
            }

            // if we got here, the request was not
            // handled, therefore we need to pass the
            // request on.
            if(next) next();

            // route wasn't handled.
            return false;
        }

        private initialize(): void {
            
            this.routes = [];

            this.module.exports.forEach((moduleExport) => {
                
                if(moduleExport.type.identifier == 'method') {
                    
                    var route = this.resolve_route_from_export(moduleExport);

                    if(route) {
                    
                        this.routes.push(route);
                    }
                }            
            });        
        }

        private resolve_route_from_export (moduleExport : appex.modules.ModuleExport) : appex.web.routing.IRoute {
            
            var method = <typescript.api.Method>moduleExport.type;
            
            if(this.validate_json_signature(method)) {
            
                return new appex.web.routing.ModuleJsonRoute(moduleExport);
            }
            
            if(this.validate_index_signature(method)) {
            
                return new appex.web.routing.ModuleIndexRoute(moduleExport);
            }

            if(this.validate_wildcard_signature(method)) {

                return new appex.web.routing.ModuleWildcardRoute(moduleExport);
            }

            if(this.validate_generic_signature(method)) {
            
                return new appex.web.routing.ModuleGenericRoute(moduleExport);
            }

            return null;
        }

        private validate_wildcard_signature(method:typescript.api.Method) : boolean {
            
            if(method.parameters.length > 1) {
                
                for(var i = 1; i < method.parameters.length; i++) {
                        
                    var typename = method.parameters[i].type.name;
                       
                    if(typename == 'number' || typename == 'string' || typename == 'any') {
                        
                        return true;
                    }
                }
            }

            return false;
        }

        private validate_index_signature(method:typescript.api.Method) : boolean {
        
            if(method.name == 'index') {
            
                if(method.parameters.length == 1) {
                
                    return true;
                }
            }

            return false;
        }

        private validate_json_signature(method:typescript.api.Method) : boolean {
            
            console.log(method.name + ' ' + method.parameters.length.toString());

            if(method.parameters.length == 3) {

                

                if(method.parameters[2].type.name == "Function") {
     
                    if(method.parameters[2].type.signature.parameters.length == 1) {
                        
                        if(method.parameters[2].type.signature.parameters[0].type.name != "Function") {
                            
                            return true;
                        }
                    }
                }   
            }

            return false;
        }

        private validate_generic_signature(method:typescript.api.Method) : boolean {
            
            if(method.parameters.length == 1) {
            
                return true;
            }
            
            return false;
        }
    }

}