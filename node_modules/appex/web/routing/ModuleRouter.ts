// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../../modules/Module.ts" />
/// <reference path="IRouter.ts" />
/// <reference path="ModuleIndexRoute.ts" />
/// <reference path="ModuleNamedRoute.ts" />
/// <reference path="ModuleWildcardRoute.ts" />

module appex.web.routing {

    /** the appex router */
    export class ModuleRouter implements appex.web.routing.IRouter {
        
        /** the routes */
        public routes : appex.web.routing.IRoute[];


        /** the appex module in which to apply routes 
        * 
        *   arguments:
        *       module - the appex module.
        */
        constructor(public module:appex.modules.Module) {
            
            this.routes = [];

            this.initialize();
        }

        
        /** router http handler 
        *
        *   arguments:
        *       app      - the app context
        *       request  - the nodejs http request.
        *       response - the nodejs http response.
        */
        public handler ( app : any, request:http.ServerRequest, response:http.ServerResponse ) : boolean {
            
            for(var n in this.routes) {
            
                var route = <appex.web.routing.IRoute>this.routes[n];

                if(route.match(request)) {

                    return route.handler(app, request, response);
                }
            }

            return false;
        }


        /** initializes the router */
        private initialize(): void {
            
            this.routes = [];

            var that = this;

            for(var n in this.module.exports) {

                var moduleExport = this.module.exports[n];

                if(moduleExport.type.identifier == 'method') {
                    
                    var route = that.resolve_route_from_export(moduleExport);

                    if(route) {
                    
                        that.routes.push(route);
                    }
                }
            }     
        }


        /** resolves a route from a appex modules export 
        *
        *   arguments:
        *       moduleExport - the module export to resolve.
        *       returns      - a route (or null if not applicable)
        */
        private resolve_route_from_export (moduleExport : appex.modules.ModuleExport) : appex.web.routing.IRoute {
            
            var method = <typescript.api.Method>moduleExport.type;
            
            if(this.validate_index_signature(method)) {
                
                return new appex.web.routing.ModuleIndexRoute(moduleExport);
            }

            if(this.validate_wildcard_signature(method)) {

                return new appex.web.routing.ModuleWildcardRoute(moduleExport);
            }
            
            if(this.validate_named_signature(method)) {
            
                return new appex.web.routing.ModuleNamedRoute(moduleExport);
            }

            return null;
        }


        /** validates a wildcard signature */
        private validate_wildcard_signature(method:typescript.api.Method) : boolean {
            
            if(method.name == 'wildcard') {
                
                if(method.parameters.length > 1) {
                    
                    return true;
                }
            }

            return false;
        }


        /** validates a index signature */
        private validate_index_signature(method:typescript.api.Method) : boolean {
        
            if(method.name == 'index') {
            
                if(method.parameters.length == 1) {
                
                    return true;
                }
            }

            return false;
        }


        /** validates a named signature */
        private validate_named_signature(method:typescript.api.Method) : boolean {
            
            if(method.parameters.length == 1) {
            
                return true;
            }
            
            return false;
        }
    }

}