// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../../modules/IModule.ts" />
/// <reference path="../IContext.ts" />
/// <reference path="IRoute.ts" />

module appex.web.routing {

    /** appex named route. handles named routes / function */
    export class NamedRoute implements appex.web.routing.IRoute {
        
        /** the pathname used to match this route. */
        public pathname : string;


        /** arguments:
        *       moduleExport : the module export for this route. (must be a function).
        */
        constructor(public moduleExport : appex.modules.IModuleExport) {
            
            this.initialize();
        }


        /** matches a route from the given request 
        *
        *   arguments:
        *       request : the nodejs http request to match.
        */
        public match ( context: appex.web.IContext ) : boolean {
            
            var url = node.url.parse(context.request.url);
            
            var cascade = this.moduleExport.cascade();
            
            if(cascade.verbs) {
                
                if( Object.prototype.toString.call( cascade.verbs ) === '[object Array]' ) {
                            
                    for(var n in cascade.verbs ) {
                            
                        if( Object.prototype.toString.call( cascade.verbs[n] ) === '[object String]' ) {
                            
                            if(cascade.verbs[n].toLowerCase() == context.request.method.toLowerCase()) {

                                return this.pathname == url.pathname;
                            }
                            return false;
                        }
                        return false;
                    }
                    return false;
                }
            }
            else {

                return this.pathname == url.pathname;
            }
        }


        /** invokes the target.
        *
        *   arguments:
        *       method  : the method to invoke.
        *       context : the context.
        */
        private invoke(method, context:appex.web.Context): void {
            
            var stack = [];

            var index = 0;

            var next  = function() {
                
                if(stack.length > 0) {
                
                    var middleware = stack.pop();
                    
                    context.next = next;

                    middleware(context);
                } 
                else {

                    method(context);
                }
            }

            // if use.. invoke the middleware stack.
            if(context.cascade.use) {

                if( Object.prototype.toString.call( context.cascade.use ) === '[object Array]' ) {

                    for(var i = (context.cascade.use.length - 1); i >= 0; i--) {

                        if( Object.prototype.toString.call( context.cascade.use[i] ) === '[object Function]' ) {

                            stack.push( context.cascade.use[i] )
                        }
                    }

                    next();

                    return;
                }
            }

            method(context);
        }


        /** handles route invocation.
        *
        *   arguments:
        *       app      - the application context.
        *       request  - the nodejs http request.
        *       response - the nodejs http response.
        *       returns  - success if the route was handled.
        */
        public handler ( context: appex.web.IContext ) : boolean {
        
            var method = this.moduleExport.accessor();
            
            if(method) {

                context.cascade = this.moduleExport.cascade();

                this.invoke(method, context);
                
                return true;
            }

            throw new Error('appex.web.routing.ModuleNamedRoute : unable to load accessor from moduleExport.');

            return false;
        }


        /** initializes this route */
        private initialize() : void {
            
            var method = <typescript.api.Method>this.moduleExport.type;

            var scope  = method.scope;

            if(scope.length > 0) {

                if(scope[0].indexOf('"') !== -1) {
                    
                    scope = scope.slice(1);
                }
            }

            if(scope.length == 0) 
            {        
                this.pathname = '/' + method.name;
            } 
            else  
            {
                this.pathname = '/' + scope.join('/') + '/' + method.name;
            }        
        }
    }
}