// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="IRoute.ts" />
/// <reference path="../../modules/Module.ts" />

module appex.web.routing {

    export class ModuleWildcardRoute implements appex.web.routing.IRoute {
        
        public regexp : RegExp;

        constructor(public moduleExport:appex.modules.ModuleExport) {
        
            this.initialize();
        }

        public match ( request : http.ServerRequest) : boolean {

            var url       = node.url.parse(request.url);

            var attribute = this.moduleExport.attribute();

            if(!attribute) {
            
                return this.regexp.test(url.pathname);
            } 
            else 
            {
                if(attribute.verbs) {
                    
                    if( Object.prototype.toString.call( attribute.verbs ) === '[object Array]' ) {
                            
                        for(var n in attribute.verbs ) {
                            
                            if( Object.prototype.toString.call( attribute.verbs[n] ) === '[object String]' ) {
                            
                                if(attribute.verbs[n].toLowerCase() == request.method.toLowerCase()) {
                                    
                                    return this.regexp.test(url.pathname);
                                }
                                return false;
                            }
                            return false;
                        }
                        return false;
                    }
                    return false;
                }                
            }
        }

        public handler( context : any, request:http.ServerRequest, response:http.ServerResponse ) : boolean {

            var accessor = this.moduleExport.accessor();

            if(accessor) {

                var attribute = this.moduleExport.attribute();

                if(attribute) {
                
                    context.attribute = attribute;
                }  

                var url = node.url.parse(request.url);

                var arguments = this.arguments(url.pathname);

                arguments.unshift( context );                
                                
                accessor.apply(this, arguments);
                
                return true;   
            }

            throw new Error("appex.web.routing.ModuleWildcardRoute : unable to load accessor from moduleExport.");

            return false;
        }

        private initialize() : void {

            var method = <typescript.api.Method>this.moduleExport.type;
            
            var scope  = method.scope;

            if(scope.length > 0) {

                if(scope[0].indexOf('"') !== -1) {
                    
                    scope = scope.slice(1);
                }
            }
            
            var buffer = [];

            buffer.push("^");

            if(scope.length > 0) {

                buffer.push('/', scope.join('/'));
            } 

            for(var i = 1; i < method.parameters.length; i++) {
                
                if(method.parameters[i].type.name == 'number') { 

                    buffer.push('/([0-9]*)');
                }
                else {

                    buffer.push('/(.*)');
                }
            }

            buffer.push('$');

            this.regexp = new RegExp(buffer.join(''));        
        }

        private arguments (url : string) : any [] {

            var arguments = [];

            var match     = this.regexp.exec(url);
            
            if(match)  {

                var method = <typescript.api.Method>this.moduleExport.type;

                var index  = 0;

                for(var n in match) {

                    if(n != '0' && n != 'index' && n != 'input') {

                        var arg:any = match[n];

                        if(method.parameters[index + 1].type.name == 'number') {
                        
                            arg = parseFloat(arg);
                        }

                        arguments.push(arg);

                        index += 1;
                    }
                }
            }
            return arguments;
        }
    }
}