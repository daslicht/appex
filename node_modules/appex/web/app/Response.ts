// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../../references.ts" />

/// <reference path="IResponse.ts" />

module appex.web.app {

    export class Response implements appex.web.app.IResponse {

        public headers: appex.IDictionary<string, string>;

        constructor(public response: http.ServerResponse) {
            
            this.headers = {};
        }

        public send  (...params: any[]): void {

            var that = this;

            var _send = function(status, data) {

                that.response.writeHead(status, that.headers);

                that.response.write(data);

                that.response.end();                
            };

            if(typeof params[0] == "number") {

                _send(params[0], params[1]);
            }
            else
            {
                _send(200, params[0]);           
            }
        }

        public serve (...params: any[]) : void {
            
            var that = this;

            var not_found = function(filepath) {

                that.response.writeHead(404, {'content-type' : 'text/plain'});

                that.response.write(filepath + ' not found.');

                that.response.end();         
            };

            var _serve = function(status, path, filepath) {

                if(filepath.indexOf('..') !== -1) {
        
                    not_found(filepath);

                    return;
                }

                path = node.path.join(path, filepath);

                node.fs.stat(path, function(error:Error, stats:fs.Stats) {
                    
                    if(error) {

                        not_found(filepath);

                        return;
                    }

                    node.fs.readFile(path, (error:Error, data:NodeBuffer)=> {
                        
                        if(error) {
                        
                            not_found(filepath);

                            return;
                        }

                        that.response.writeHead(status, that.headers);

                        that.response.write(data);

                        that.response.end();  
                    });
                });        
            };

            if(typeof params[0] == "number") {

                that.response.writeHead(params[0], that.headers);

                _serve(params[0], params[1], params[2]);
            }
            else
            {
                _serve(200, params[0], params[1]);             
            }
        }
        
        public json  (...params:any[]): void {
            
            var that = this;

            var _json = function(status, obj) {

                if(!that.headers['content-type']) {
                
                    that.headers['content-type'] = 'application/json';
                }

                that.response.writeHead(status, that.headers);

                var data = JSON.stringify(obj, null, 4);

                that.response.write(data);

                that.response.end();                 
            };
            
            if(typeof params[0] == "number") {

                if(params.length == 1)
                {
                    _json(200, params[0]);
                }
                else
                {
                    _json(params[0], params[1]);
                }
            }
            else
            {
                _json(200, params[0]);             
            }
        }

        public jsonp  (...params:any[]): void {
            
            var that = this;

            var _jsonp = function(status, obj, callback) {

                if(!that.headers['content-type']) {
                    
                    that.headers['content-type'] = 'text/javascript';
                }

                that.response.writeHead(status, that.headers);

                var data = JSON.stringify(obj, null, 4);

                data = [callback, ' && ', callback, '(', data, ');'].join('');

                that.response.write(data);

                that.response.end();                 
            };
            
            if(params.length == 1)
            {
                _jsonp(200, params[0], 'callback');
            }

            if(params.length == 2)
            {
                _jsonp(params[0], params[1], 'callback');
            }

            if(params.length == 3)
            {
                _jsonp(params[0], params[1], params[2]);
            }
        }
    }
}