// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <referecne path="../references.ts" />
/// <reference path="../interfaces.ts" />
/// <reference path="../compiler/Compiler.ts" />
/// <reference path="../modules/Module.ts" />
/// <reference path="routing/IRouter.ts" />
/// <reference path="routing/ModuleRouter.ts" />
/// <reference path="media/Mime.ts" />
/// <reference path="ServerOptions.ts" />
/// <reference path="ServerRequest.ts" />
/// <reference path="IHandler.ts" />
/// <reference path="IServer.ts" />

module appex.web {

    export class DevelopmentServer implements appex.web.IServer, appex.IDisposable {

        private compiler               : appex.compiler.Compiler;

        private mime                   : appex.web.media.Mime;

        private module                 : appex.modules.Module;

        private middlewares            : appex.web.IHandler[];

        private router                 : appex.web.routing.ModuleRouter;

        private pending                : appex.web.ServerRequest[];
        
        private compiling              : boolean;
        
        constructor(public options:appex.web.IServerOptions) {
            
            this.compiler              = new appex.compiler.Compiler();

            this.mime                  = new appex.web.media.Mime();

            this.module                = null;

            this.middlewares           = [];

            this.router                = null;

            this.pending              = [];

            this.compiling             = false;

            this.options.stdout.write('appex \033[32m- development server\033[0m\n');
        }

        public use (middleware:appex.web.IHandler) : void {
        
            this.middlewares.push( middleware );
        }
        
        public handler (request:http.ServerRequest, response:http.ServerResponse, next?:Function) : void {
            
            this.pending.push( new appex.web.ServerRequest(request, response, next) );
            
            this.compile((diagnostics) => {

                if(diagnostics) {
                
                    this.errors(diagnostics);

                    return;
                }

                while(this.pending.length > 0) {

                    var waiter  = this.pending.pop ();

                    var context = this.load_context   (waiter);

                    var handled = this.router.handler (context, waiter.request, waiter.response);

                    if(handled) {
                        
                        if(this.options.logging) {

                            var message = [];

                            message.push(waiter.request.method , ' ');

                            message.push('[' , waiter.stopwatch.stop().toString() , 'ms] ');

                            message.push(waiter.request.url, '\n');

                            this.options.stdout.write(message.join(''));
                        }
                    }
                    else {
                        
                        // connect middleware.
                        if(waiter.next) {
                        
                            waiter.next();
                        }
                    }
                }
            });
        }

        private load_context(request:appex.web.ServerRequest) : any {

            var context:any = {};
        
            for(var n in this.options.context) {
            
                context[n] = this.options.context[n];
            }

            context.request  = request.request;

            context.response = request.response;

            if(request.next) {
            
                context.next = request.next;
            }

            context.module   = this.module;

            context.router   = this.router;

            context.mime     = this.mime;

            return context;
        }

        private compile( callback: (diagnostics:typescript.api.Diagnostic[]) => void ): void {
        
            if(!this.compiling) {

                this.compiling = true;
                
                this.compiler.compile(this.options.sourcefile, (result) => {
                    
                    this.compiling = false;

                    if(result.diagnostics.length > 0) {
                    
                        callback(result.diagnostics);

                        return;
                    }
                    
                    this.module     = new appex.modules.Module(result);

                    this.router     = new appex.web.routing.ModuleRouter(this.module);

                    callback(null);
                });
            }             
        }

        private errors(diagnostics:typescript.api.Diagnostic[]) : void {
        
            while(this.pending.length > 0) {

                var request = this.pending.pop ();

                request.response.writeHead(500, {'content-type' : 'text/plain'});

                diagnostics.forEach((diagnostic) => {
    
                    var message = [];
                            
                    message.push( diagnostic.path )
                            
                    message.push(" [" , (diagnostic.line_index + 1).toString(),  ":" , (diagnostic.char_index + 1).toString() , "] ");
                            
                    message.push(diagnostic.message, '\n');

                    request.response.write(message.join(''));

                    if(this.options.logging) {

                        this.options.stderr.write( message.join('') );
                    }
                });

                request.response.end();
            }         
        }

        public dispose(): void {
        
            this.compiler.dispose();
        }
    }
}