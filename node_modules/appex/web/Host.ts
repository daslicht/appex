/// <reference path="../references.ts" />
/// <reference path="../compilers/Compiler.ts" />
/// <reference path="../modules/Module.ts" />
/// <reference path="../modules/Handle.ts" />
/// <reference path="Route.ts" />
/// <reference path="Controller.ts" />


module appex {
    
    export class Host implements IDisposable {
        
        public server   : http.Server;

        public compiler : appex.Compiler;

        public modules  : appex.Module[];

        public routes   : appex.Route[];

        constructor() {
            
            this.compiler = new appex.Compiler();

            this.routes   = [];

            this.modules  = [];

            this.server   = null;

        }


        public bind ( server: http.Server): void {
        
            this.server   = server;

            var listeners = this.server.listeners('request');
         
            this.server.removeAllListeners('request');
            
            this.server.on('request', (request:http.ServerRequest, response:http.ServerResponse) => {
                
                this.request_handler(request, response, (handled) => {
                    
                    if(!handled) 
                    {
                        for(var n in listeners) 
                        {
                            listeners[n](request, response);
                        }
                    }       
                });
            });               
        }

        private read_body (request:http.ServerRequest, callback: (buffer:string)=>void) : void {
        
            var buffer = [];

            request.on('data', (chunk) => { buffer.push(chunk); });

            request.on('end',  ()      => { callback(buffer.join('')); });
        }

        private error_handler       (error:string, request:http.ServerRequest, response:http.ServerResponse) : void {
            
            response.writeHead(500, { 'content-type' : 'text/plain'});

            response.write(error.toString());

            response.end();      
        }

        public metadata(request:http.ServerRequest, response:http.ServerResponse) : void {
        
            response.writeHead(200, { 'content-type' : 'text/plain' });

            response.write('appex web host: \n');
    
            for (var n in this.routes) {

                response.write('--------------------------------------------\n')

                response.write( 'url: ' + this.routes[n].url + '\n' );

                response.write('request:\n');

                response.write( JSON.stringify(this.routes[n].requestType, null, ' ') + '\n' );

                response.write('response:\n');

                response.write( JSON.stringify(this.routes[n].responseType, null, ' ') + '\n' );
            }
    
            response.end();        
        }

        private request_handler (request:http.ServerRequest, response:http.ServerResponse, callback:(handled:boolean)=>void) : void {
            
            if(this.routes.length == 0) {
            
                callback(false);

                return;
            }

            var handled = false;

            for(var n in this.routes)
            {   
                var route = this.routes[n];

                if(route.url == request.url) 
                {
                    handled = true;
                    
                    // apply the context

                    var instance      = <appex.Controller>route.instance;

                    instance.server   = this.server;

                    instance.request  = request;

                    instance.response = response;

                    
                    // unpack the request.

                    var buffer = [];

                    this.read_body(request, (buffer) => { 
                        
                        var input = null;

                        try 
                        {
                            input = JSON.parse(buffer);
                        }
                        catch(e) 
                        {
                                    
                        }
                        
                        try 
                        {
                            route.call(input, (output) => {
                                    
                                var json = 'null'; 
                                    
                                if(output)
                                {
                                    json = JSON.stringify(output, null, ' ');
                                }
                                    
                                response.writeHead(200, { 'content-type' : 'application/json'});

                                response.write(json);

                                response.end();

                                callback(handled);
                            });
                           
                        } 
                        catch(error) 
                        {
                            this.error_handler(error.toString(), request, response); 
                            
                            callback(handled);

                            return;                         
                        }
                    });

                    break;
                } 
            }
            callback(handled);
        }

        public  require  (source:string, callback? : (module: appex.Module) => void) : void {
            
            this.compiler.compile(source, (compiler_result:appex.CompilerResult) => {
                
                // if errors
                if(compiler_result.errors.length > 0 ) {

                    for(var n in compiler_result.errors) {
                    
                        console.log(compiler_result.errors[n]); 
                    }

                    if(callback) callback(null);

                    return;
                }

                // bind
                if(compiler_result.errors.length == 0 ) {

                    var module = new appex.Module(compiler_result.script, compiler_result.reflection);

                    this.modules.push(module);

                    // iterate types in this module.

                    module.handles.forEach((handle) => { 
            
                        // isolate classes

                        if(handle.type.identifier == 'class') {  
                    
                            var typeinfo = <typescript.api.Class>handle.type;
    
                            // iterate the classes extends

                            typeinfo.extends.forEach((type)=> {  
                        
                                // only continue of the class extends appex.Service.

                                if(type.name == "appex.Controller") { 
                        
                                    var constructor = module.get(handle);

                                    var instance    = new constructor();

                                    var baseurl     = '/' + handle.scope.join('/') + '/' + typeinfo.name;
                            
                                    baseurl = baseurl.replace(/\/\//g,'/').toLowerCase();
                            
                                    // for each method in this class, create a route.

                                    typeinfo.methods.forEach((method) => { 

                                        if(method.isConstructor == false) {

                                            if(method.isPublic == true) {

                                                if(method.parameters.length == 2) {

                                                    if(method.parameters[1].type.name == "Function") {

                                                        var route = new appex.Route();

                                                        route.instance     = instance;

                                                        route.url          = [baseurl, method.name].join('/').toLowerCase();
                        
                                                        route.method       = method.name;

                                                        route.requestType  = method.parameters[0].type;

                                                        route.responseType = method.parameters[1].type.signature.parameters[0].type;
                                                       
                                                        this.routes.push(route);

                                                    }
                                                }
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    });

                    if(callback) callback(module);
                }
            });  
        }

        public  dispose() : void 
        {
            this.compiler.dispose();
        }
    }


}