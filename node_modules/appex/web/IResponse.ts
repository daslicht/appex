// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../references.ts" />
/// <reference path="../interfaces.ts" />

module appex.web {
    
    /** A appex http response */
    export interface IResponse extends http.ServerResponse {

        headers : appex.IDictionary<string, string>;

        /** sends a response to the http output stream with http status code 200. will set
        *   the 'content-type' http header to 'text/plain' if value has not been set.
        *   arguments:
        *       data - a string value to send.
        */
        send (data     : string): void;
        
        
        /** sends a response to the http output stream with http status code 200.will set
        *   the 'content-type' http header to 'text/plain' if value has not been set.
        *   
        *   arguments:
        *       data - nodejs buffer to send.
        */
        send (data     : NodeBuffer): void;
        

        /** sends a response to the http output stream. will set the 'content-type' http header 
        * to 'text/plain' if value has not been set.
        *   
        *   arguments:
        *       status - the http status code.
        *       data - nodejs buffer to send.
        */
        send (status   : number, data : string): void;


        /** serves a local file with status code 200. if not found, will send status code 404 with a 'not found' message.
        *   will resolve files mime type if the 'content-type' header has not been set. 
        *   arguments:
        *       path - the root directory in which to serve.
        *       filepath - the filepath from the root directory to serve.
        */
        serve (path    : string, filepath: string): void;


        /** serves a local file with the supplied status code. if not found, will send status code 404 with a 'not found' message.
        *   will resolve files mime type if the 'content-type' header has not been set. 
        *   
        *   arguments:
        *       status - the http status code.
        *       path - the root directory in which to serve.
        *       filepath - the filepath from the root directory to serve.
        */
        serve (status : number, path : string, filepath: string): void;


        /** sends a json string to the http output stream with http status code 200. will set
        *   the http header 'content-type' to 'application/json' if this value has not been by the
        *   caller.
        *   arguments:
        *       obj - a javascript object.
        */
        json (obj      : any): void;


        /** sends a json string to the http output stream with the supplied status code. will set
        *   the http header 'content-type' to 'application/json' if this value has not been by the
        *   caller.
        *   
        *   arguments:
        *       status - the http status code.
        *       obj - a javascript object.
        */
        json (status   : number, obj : any): void;


        /** sends a jsonp string to the http output stream with http status code 200. will set
        *   the http header 'content-type' to 'text/javascript' if this value has not been by the
        *   caller. the jsonp callback variable name will be set to 'callback'.
        *
        *   arguments:
        *       obj - a javascript object.
        */
        jsonp (obj     : any): void;


        /** sends a jsonp string to the http output stream with the supplied status code. will set
        *   the http header 'content-type' to 'text/javascript' if this value has not been by the
        *   caller. the jsonp callback variable name will be set to 'callback'.
        *   
        *   arguments:
        *       status - the http status code.
        *       obj - a javascript object.
        */
        jsonp (status  : number, obj : any): void;


        /** sends a jsonp string to the http output stream with the supplied status code. will set
        *   the http header 'content-type' to 'text/javascript' if this value has not been by the
        *   caller.
        *   
        *   arguments:
        *       status - the http status code.
        *       obj - a javascript object.
        *       callback - a string value to set the jsonp callback variable.
        */
        jsonp (status  : number, obj : any, callback: string): void;
    }

    /** patches the nodejs http response with appex response api. 
    *   
    *   arguments:
    *       response - the nodejs http response
    *       returns  - nodejs http + appex response api.
    */
    export function BindResponse  (response: http.ServerResponse) : appex.web.IResponse {
        
        var handle:any    = <any>response;
        
        handle.headers = [];

        handle.send   = send;

        handle.serve  = serve;

        handle.json   = json;

        handle.jsonp  = jsonp;

        return handle;
    }

    function send  (...params: any[]): void {

        var that = this;

        var _send = function(status, data) {

            that.writeHead(status, that.headers);

            that.write(data);

            that.end();                
        };

        if(typeof params[0] == "number") {

            _send(params[0], params[1]);
        }
        else
        {
            _send(200, params[0]);           
        }
    }

    function serve (...params: any[]) : void {
            
        var that = this;

        var not_found = function(filepath) {

            that.writeHead(404, {'content-type' : 'text/plain'});

            that.write(filepath + ' not found.');

            that.end();         
        };

        var _serve = function(status, path, filepath) {

            if(filepath.indexOf('..') !== -1) {
        
                not_found(filepath);

                return;
            }

            path = node.path.join(path, filepath);

            node.fs.stat(path, function(error:Error, stats:fs.Stats) {
                    
                if(error) {

                    not_found(filepath);

                    return;
                }

                node.fs.readFile(path, (error:Error, data:NodeBuffer)=> {
                        
                    if(error) {
                        
                        not_found(filepath);

                        return;
                    }

                    that.writeHead(status, that.headers);

                    that.write(data);

                    that.end();  
                });
            });        
        };

        if(typeof params[0] == "number") {

            that.writeHead(params[0], that.headers);

            _serve(params[0], params[1], params[2]);
        }
        else
        {
            _serve(200, params[0], params[1]);             
        }
    }
        
    function json  (...params:any[]): void {
            
        var that = this;

        var _json = function(status, obj) {

            if(!that.headers['content-type']) {
                
                that.headers['content-type'] = 'application/json';
            }

            that.writeHead(status, that.headers);

            var data = JSON.stringify(obj, null, 4);

            that.write(data);

            that.end();                 
        };
            
        if(typeof params[0] == "number") {

            if(params.length == 1)
            {
                _json(200, params[0]);
            }
            else
            {
                _json(params[0], params[1]);
            }
        }
        else
        {
            _json(200, params[0]);             
        }
    }

    function jsonp  (...params:any[]): void {
            
        var that = this;

        var _jsonp = function(status, obj, callback) {

            if(!that.headers['content-type']) {
                    
                that.headers['content-type'] = 'text/javascript';
            }

            that.writeHead(status, that.headers);

            var data = JSON.stringify(obj, null, 4);

            data = [callback, ' && ', callback, '(', data, ');'].join('');

            that.write(data);

            that.end();                 
        };
            
        if(params.length == 1)
        {
            _jsonp(200, params[0], 'callback');
        }

        if(params.length == 2)
        {
            _jsonp(params[0], params[1], 'callback');
        }

        if(params.length == 3)
        {
            _jsonp(params[0], params[1], params[2]);
        }
    }
}