// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <referecne path="../references.ts" />
/// <reference path="../interfaces.ts" />
/// <reference path="../compiler/Compiler.ts" />
/// <reference path="../modules/Module.ts" />
/// <reference path="routing/IRouter.ts" />
/// <reference path="routing/ModuleRouter.ts" />
/// <reference path="media/Mime.ts" />
/// <reference path="IServer.ts" />
/// <reference path="ServerOptions.ts" />
/// <reference path="Waiter.ts" />

module appex.web {

    /** a appex server. JIT once and watch it fly. */
    export class Server implements appex.web.IServer, appex.IDisposable {

        private server                 : http.Server;

        private compiler               : appex.compiler.Compiler;

        private mime                   : appex.web.media.Mime;

        private module                 : appex.modules.Module;

        private router                 : appex.web.routing.ModuleRouter;

        private waiters                : appex.web.Waiter[];

        private compiled               : boolean;

        private compiling              : boolean;
        
        /** arguments:
        *    options - server start options.
        */
        constructor(public options:appex.web.IServerOptions) {
            
            this.compiler              = new appex.compiler.Compiler();

            this.mime                  = new appex.web.media.Mime();

            this.module                = null;

            this.router                = null;

            this.waiters              = [];

            this.compiling             = false;

            this.compiled              = false;

            this.options.stdout.write('appex \033[32m- server\033[0m\n');         
        }

        /** creates a nodejs http server based on the server options protocol.
         *
         *  arguments:
         *      port - the port to listen on.
         */
        public listen(port:number) : void {
        
            var protocol:any = this.options.protocol == "http" ? node.http : node.https;

            var that = this;

            this.server = protocol.createServer(function(request : http.ServerRequest, response : http.ServerResponse, next : Function) : void {
            
                that.handler(request, response, null);
            });
            
            this.server.listen(port);
        }

        /** the http request handler.
        *   
        *   arguments:
        *       request  - the nodejs http request.
        *       response - the nodejs http response.
        *       next     - (optional) the next callback used for express / connect middleware.
        */  
        public handler (request:http.ServerRequest, response:http.ServerResponse, next?:Function) : void {
            
            this.waiters.push( new appex.web.Waiter ( request, response, next) );
            
            var that = this;

            this.compile(function(diagnostics) {

                if(diagnostics) {
                
                    that.errors(diagnostics);

                    return;
                }

                while(that.waiters.length > 0) {

                    var waiter  = that.waiters.pop ();

                    var context = that.load_app   (waiter);

                    var handled = that.router.handler (context, waiter.request, waiter.response);

                    if(handled) {
                        
                        if(that.options.logging) {

                            var message = [];

                            message.push(waiter.request.method , ' ');

                            message.push('[' , waiter.stopwatch.stop().toString() , 'ms] ');

                            message.push(waiter.request.url, '\n');

                            that.options.stdout.write(message.join(''));
                        }
                    }
                    else 
                    {    
                        if(waiter.next) 
                        { 
                            waiter.next();
                        }
                    }
                }
            });
        }

        /** loads the app for a waiting request.
        *   
        *   arguments:
        *       waiter   - the deferred http waiter.
        *       returns  - the app.
        */  
        private load_app(waiter : appex.web.Waiter ) : any {

            var app:any = {};
        
            for(var n in this.options.context) {
            
                app[n] = this.options.context[n];
            }

            app.request  = waiter.request;

            app.response = waiter.response;

            if(waiter.next) {
            
                app.next = waiter.next;
            }

            app.module   = this.module;

            app.router   = this.router;

            app.mime     = this.mime;

            if(this.server) {
            
                app.server = this.server;
            }

            return app;
        }

        /** compiles options.program then releases the compiler.
        *   
        *   arguments:
        *       callback - a callback containing any diagnostics.
        */ 
        private compile( callback: (diagnostics:typescript.api.Diagnostic[]) => void ): void {
            
            if(!this.compiled) {

                if(!this.compiling) {

                    this.compiling = true;
                
                    var that = this;

                    this.compiler.compile(this.options.program, function(result) {
                    
                        that.compiling = false;

                        if(result.diagnostics.length > 0) {
                    
                            callback(result.diagnostics);

                            return;
                        }
                    
                        that.module     = new appex.modules.Module(result);

                        that.router     = new appex.web.routing.ModuleRouter(that.module);

                        that.compiled   = true;

                        that.compiler.dispose();

                        callback(null);
                    });
                }
            }
            else
            {
                callback(null);
            }   
        }
        /** emits compilation errors to options.stdout and a 500 'internal server error' message to http buffer.
        *   
        *   arguments:
        *       diagnostics - the diagnostics to emit.
        */
        private errors(diagnostics:typescript.api.Diagnostic[]) : void {
        
            while(this.waiters.length > 0) {

                var request = this.waiters.pop ();

                request.response.writeHead(500, {'content-type' : 'text/plain'});

                request.response.write('internal server error.');

                request.response.end();

                for(var n in diagnostics) {
                
                    var diagnostic = diagnostics[n];

                    var message = [];
                            
                    message.push( diagnostic.path )
                            
                    message.push(" [" , (diagnostic.line_index + 1).toString(),  ":" , (diagnostic.char_index + 1).toString() , "] ");
                            
                    message.push(diagnostic.message, '\n');

                    if(this.options.logging) {

                        this.options.stderr.write( message.join('') );
                    }
                }
            }         
        }
        
        /** disposes of this server */
        public dispose(): void {
        
            this.compiler.dispose();

            if(this.module) {
            
                this.module.dispose();
            }
        }
    }
}