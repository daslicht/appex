//@ sourceMappingURL=interfaces.js.map
//@ sourceMappingURL=CompilerResult.js.map
var node;
(function (node) {
    node.http = require('http');

    node.fs = require('fs');

    node.vm = require('vm');

    node.path = require('path');

    node.child_process = require('child_process');
})(node || (node = {}));
//@ sourceMappingURL=references.js.map
var appex;
(function (appex) {
    var Handle = (function () {
        function Handle(scope, type) {
            this.scope = scope.slice(0);

            this.type = type;
        }
        return Handle;
    })();
    appex.Handle = Handle;
})(appex || (appex = {}));
//@ sourceMappingURL=Handle.js.map
var appex;
(function (appex) {
    var Route = (function () {
        function Route(handle) {
            this.handle = handle;

            this.url = '';

            this.type = 'unknown';

            this.inputType = null;

            this.outputType = null;

            this.setup();
        }
        Route.prototype.setup = function () {
            if (this.handle.type.identifier == "method") {
                this.setup_url(this.handle.type);

                this.setup_type(this.handle.type);
            } else {
                this.type = 'invalid';
            }
        };

        Route.prototype.setup_url = function (method) {
            var name = method.name.toLowerCase();

            if (this.handle.scope.length == 0) {
                this.url = name == 'index' ? "/" : name;
            } else {
                this.url = name == 'index' ? ('/' + this.handle.scope.join('/')) : ('/' + this.handle.scope.join('/') + '/' + name);
            }
        };

        Route.prototype.setup_type = function (method) {
            if (method.parameters.length == 1) {
                this.type = 'handler';

                return;
            }

            if (method.parameters.length == 3) {
                if (method.parameters[2].type.name == "Function") {
                    if (method.parameters[2].type.signature.parameters.length == 1) {
                        if (method.parameters[2].type.signature.parameters[0].type.name != "Function") {
                            this.type = 'method';

                            this.inputType = method.parameters[1].type;

                            this.outputType = method.parameters[2].type.signature.parameters[0].type;

                            return;
                        }
                    }
                }
            }

            this.type = 'invalid';
        };
        return Route;
    })();
    appex.Route = Route;
})(appex || (appex = {}));
//@ sourceMappingURL=Route.js.map
var appex;
(function (appex) {
    var Message = (function () {
        function Message() {
        }
        return Message;
    })();

    var Waiter = (function () {
        function Waiter(messageid, delegate) {
            this.messageid = messageid;
            this.delegate = delegate;
        }
        return Waiter;
    })();

    var Worker = (function () {
        function Worker(delegate) {
            var _this = this;
            this.delegate = delegate;
            this.message_index = 0;

            this.waiters = new Array();

            var message = new Message();

            message.messageid = 0;

            message.type = 'setup';

            message.body = {
                code: this.delegate.toString(),
                filename: process.mainModule.filename
            };

            this.child_process = node.child_process.fork(__dirname + '/kernel.js');

            this.child_process.on('message', function (message) {
                _this.dispatch(message);
            });

            this.child_process.send(message, null);
        }
        Worker.prototype.dispatch = function (message) {
            for (var i = 0; i < this.waiters.length; i++) {
                if (this.waiters[i].messageid == message.messageid) {
                    this.waiters[i].delegate(message.body);

                    this.waiters.splice(i, 1);

                    break;
                }
            }
        };

        Worker.prototype.call = function (request, callback) {
            this.waiters.push(new Waiter(this.message_index, callback));

            var message = new Message();

            message.messageid = this.message_index;

            message.type = 'call';

            message.body = request;

            this.child_process.send(message, null);

            this.message_index = this.message_index + 1;
        };

        Worker.prototype.dispose = function () {
            this.child_process.kill();
        };
        return Worker;
    })();
    appex.Worker = Worker;
})(appex || (appex = {}));
//@ sourceMappingURL=Worker.js.map
var appex;
(function (appex) {
    var Compiler = (function () {
        function Compiler() {
            this.worker = new appex.Worker(this.kernel);
        }
        Compiler.prototype.compile = function (filename, callback) {
            this.worker.call(filename, callback);
        };

        Compiler.prototype.dispose = function () {
            this.worker.dispose();
        };

        Compiler.prototype.kernel = function (filename, callback) {
            var error_handler = function (units) {
                var errors = [];

                units.forEach(function (unit) {
                    unit.diagnostics.forEach(function (diagnostic) {
                        errors.push(diagnostic.toString());
                    });
                });

                return errors;
            };

            var typescript = require('typescript.api');

            typescript.reset();

            var errors = [];

            typescript.resolve([filename], function (resolved) {
                if (!typescript.check(resolved)) {
                    callback({
                        script: '',
                        reflection: null,
                        errors: error_handler(resolved)
                    });

                    return;
                }

                typescript.compile(resolved, function (compiled) {
                    if (!typescript.check(compiled)) {
                        callback({
                            script: '',
                            reflection: null,
                            errors: error_handler(compiled)
                        });

                        return;
                    }

                    var content = [];

                    var reflection = {
                        scripts: []
                    };

                    compiled.forEach(function (unit) {
                        content.push(unit.content);

                        reflection.scripts.push(unit.script);
                    });

                    callback({
                        script: content.join('\n'),
                        reflection: reflection,
                        errors: []
                    });
                });
            });
        };
        return Compiler;
    })();
    appex.Compiler = Compiler;
})(appex || (appex = {}));
//@ sourceMappingURL=Compiler.js.map
var appex;
(function (appex) {
    var Module = (function () {
        function Module(script, reflection) {
            this.script = script;

            this.reflection = reflection;

            this.handles = [];

            this.load_context();

            this.load_exports();
        }
        Module.prototype.get = function (handle) {
            var scope = this.context;

            for (var n in handle.scope) {
                scope = scope[handle.scope[n]];
            }

            return scope[(handle.type).name];
        };

        Module.prototype.load_context = function () {
            this.sandbox = {
                __dirname: node.path.dirname(process.mainModule.filename),
                __filename: node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js"),
                global: global,
                process: process,
                require: require,
                console: console,
                exports: {}
            };

            var script = node.vm.createScript(this.script, 'appex.module.js');

            script.runInNewContext(this.sandbox);

            this.context = this.sandbox.exports;
        };

        Module.prototype.load_exports = function () {
            var _this = this;
            var scope = [];

            this.reflection.scripts.forEach(function (script) {
                _this.load_script(scope, script);
            });
        };

        Module.prototype.load_variable = function (scope, variable) {
            if (variable.isExported) {
                this.handles.push(new appex.Handle(scope, variable));
            }
        };

        Module.prototype.load_parameter = function (scope, parameter) {
        };

        Module.prototype.load_method = function (scope, method) {
            var _this = this;
            if (method.isExported) {
                this.handles.push(new appex.Handle(scope, method));

                method.parameters.forEach(function (obj) {
                    _this.load_parameter(scope, obj);
                });
            }
        };

        Module.prototype.load_class = function (scope, _class) {
            var _this = this;
            if (_class.isExported) {
                this.handles.push(new appex.Handle(scope, _class));

                _class.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _class.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });
            }
        };

        Module.prototype.load_interface = function (scope, _interface) {
            var _this = this;
            if (_interface.isExported) {
                this.handles.push(new appex.Handle(scope, _interface));

                _interface.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _interface.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });
            }
        };

        Module.prototype.load_import = function (scope, _import) {
        };

        Module.prototype.load_module = function (scope, _module) {
            var _this = this;
            if (_module.isExported) {
                if (_module.name.indexOf("\"") == -1) {
                    scope.push(_module.name);
                }

                _module.modules.forEach(function (obj) {
                    _this.load_module(scope, obj);
                });

                _module.imports.forEach(function (obj) {
                    _this.load_import(scope, obj);
                });

                _module.interfaces.forEach(function (obj) {
                    _this.load_interface(scope, obj);
                });

                _module.classes.forEach(function (obj) {
                    _this.load_class(scope, obj);
                });

                _module.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _module.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });

                if (_module.name.indexOf("\"") == -1) {
                    scope.pop();
                }
            }
        };

        Module.prototype.load_script = function (scope, script) {
            var _this = this;
            script.modules.forEach(function (obj) {
                _this.load_module(scope, obj);
            });

            script.interfaces.forEach(function (obj) {
                _this.load_interface(scope, obj);
            });

            script.classes.forEach(function (obj) {
                _this.load_class(scope, obj);
            });

            script.methods.forEach(function (obj) {
                _this.load_method(scope, obj);
            });

            script.variables.forEach(function (obj) {
                _this.load_variable(scope, obj);
            });
        };

        Module.prototype.dispose = function () {
            this.sandbox = null;
        };
        return Module;
    })();
    appex.Module = Module;
})(appex || (appex = {}));
//@ sourceMappingURL=Module.js.map
var appex;
(function (appex) {
    var Runtime = (function () {
        function Runtime(module) {
            this.module = module;
            this.setup();
        }
        Runtime.prototype.setup = function () {
            var _this = this;
            this.routes = [];

            this.module.handles.forEach(function (handle) {
                var route = new appex.Route(handle);

                if (route.type != 'invalid') {
                    _this.routes.push(route);
                }
            });
        };

        Runtime.prototype.read_request_object = function (request, callback) {
            var buffer = [];

            request.on('data', function (chunk) {
                buffer.push(chunk);
            });

            request.on('end', function () {
                try  {
                    var obj = JSON.parse(buffer.join(''));

                    callback(obj);
                } catch (error) {
                    callback(null);
                }
            });
        };

        Runtime.prototype.write_response_object = function (output, response, callback) {
            try  {
                var json = JSON.stringify(output, null, '');

                response.writeHead(200, { 'content-type': 'application/json' });

                response.write(json);

                response.end();
            } catch (error) {
                response.writeHead(200, { 'content-type': 'application/json' });

                response.write(error.toString());

                response.end();
            }

            callback();
        };

        Runtime.prototype.handler = function (request, response, next) {
            var _this = this;
            console.log('handling requests');

            for (var n in this.routes) {
                console.log('scahnni');

                var route = this.routes[n];

                if (request.url == route.url) {
                    console.log('found a route');

                    var method = this.module.get(route.handle);

                    switch (route.type) {
                        case 'handler':
                            method({ request: request, response: response });

                            break;

                        case 'method':
                            this.read_request_object(request, function (input) {
                                method({ request: request, response: response }, input, function (output) {
                                    _this.write_response_object(output, response, function () {
                                    });
                                });
                            });

                            break;
                    }
                    return;
                }
            }

            if (next) {
                next();
            }
        };
        return Runtime;
    })();
    appex.Runtime = Runtime;
})(appex || (appex = {}));
//@ sourceMappingURL=Runtime.js.map
exports.Worker = appex.Worker;

exports.Compiler = appex.Compiler;

exports.Module = appex.Module;

exports.Handle = appex.Handle;

exports.Runtime = appex.Runtime;

exports.Route = appex.Route;

function prepare_options(options) {
    return options;
}

function runtime(options) {
    options = prepare_options(options);

    if (options.source) {
        var compiler = new appex.Compiler();

        if (options.devmode) {
            return function (request, response, next) {
                compiler.compile(options.source, function (result) {
                    var module = new appex.Module(result.script, result.reflection);

                    var runtime = new appex.Runtime(module);

                    runtime.handler(request, response, next);
                });
            };
        } else {
            var module = null;

            var runtime = null;

            return function (request, response, next) {
                if (runtime == null) {
                    compiler.compile(options.source, function (result) {
                        compiler.dispose();

                        module = new appex.Module(result.script, result.reflection);

                        runtime = new appex.Runtime(module);

                        runtime.handler(request, response, next);
                    });
                } else {
                    runtime.handler(request, response, next);
                }
            };
        }
    }
}
exports.runtime = runtime;

//@ sourceMappingURL=index.js.map
