//@ sourceMappingURL=interfaces.js.map
//@ sourceMappingURL=CompilerResult.js.map
var node;
(function (node) {
    node.http = require('http');

    node.fs = require('fs');

    node.vm = require('vm');

    node.path = require('path');

    node.child_process = require('child_process');
})(node || (node = {}));
//@ sourceMappingURL=references.js.map
var appex;
(function (appex) {
    var Handle = (function () {
        function Handle(scope, type) {
            this.scope = scope.slice(0);

            this.type = type;
        }
        return Handle;
    })();
    appex.Handle = Handle;
})(appex || (appex = {}));
//@ sourceMappingURL=Handle.js.map
var appex;
(function (appex) {
    var Route = (function () {
        function Route() {
        }
        Route.prototype.call = function (input, callback) {
            return this.instance[this.method](input, callback);
        };
        return Route;
    })();
    appex.Route = Route;
})(appex || (appex = {}));
//@ sourceMappingURL=Route.js.map
var appex;
(function (appex) {
    var Controller = (function () {
        function Controller() {
        }
        return Controller;
    })();
    appex.Controller = Controller;
})(appex || (appex = {}));
//@ sourceMappingURL=Controller.js.map
var appex;
(function (appex) {
    var Message = (function () {
        function Message() {
        }
        return Message;
    })();

    var Waiter = (function () {
        function Waiter(messageid, delegate) {
            this.messageid = messageid;
            this.delegate = delegate;
        }
        return Waiter;
    })();

    var Worker = (function () {
        function Worker(delegate) {
            var _this = this;
            this.delegate = delegate;
            this.message_index = 0;

            this.waiters = new Array();

            var message = new Message();

            message.messageid = 0;

            message.type = 'setup';

            message.body = {
                code: this.delegate.toString(),
                filename: process.mainModule.filename
            };

            this.child_process = node.child_process.fork(__dirname + '/kernel.js');

            this.child_process.on('message', function (message) {
                _this.dispatch(message);
            });

            this.child_process.send(message, null);
        }
        Worker.prototype.dispatch = function (message) {
            for (var i = 0; i < this.waiters.length; i++) {
                if (this.waiters[i].messageid == message.messageid) {
                    this.waiters[i].delegate(message.body);

                    this.waiters.splice(i, 1);

                    break;
                }
            }
        };

        Worker.prototype.call = function (request, callback) {
            this.waiters.push(new Waiter(this.message_index, callback));

            var message = new Message();

            message.messageid = this.message_index;

            message.type = 'call';

            message.body = request;

            this.child_process.send(message, null);

            this.message_index = this.message_index + 1;
        };

        Worker.prototype.dispose = function () {
            this.child_process.kill();
        };
        return Worker;
    })();
    appex.Worker = Worker;
})(appex || (appex = {}));
//@ sourceMappingURL=Worker.js.map
var appex;
(function (appex) {
    var Compiler = (function () {
        function Compiler() {
            this.worker = new appex.Worker(this.kernel);
        }
        Compiler.prototype.compile = function (filename, callback) {
            this.worker.call(filename, callback);
        };

        Compiler.prototype.dispose = function () {
            this.worker.dispose();
        };

        Compiler.prototype.kernel = function (filename, callback) {
            var error_handler = function (units) {
                var errors = [];

                units.forEach(function (unit) {
                    unit.diagnostics.forEach(function (diagnostic) {
                        errors.push(diagnostic.toString());
                    });
                });

                return errors;
            };

            var typescript = require('typescript.api');

            typescript.reset();

            var errors = [];

            typescript.resolve([filename], function (resolved) {
                if (!typescript.check(resolved)) {
                    callback({
                        script: '',
                        reflection: null,
                        errors: error_handler(resolved)
                    });

                    return;
                }

                typescript.compile(resolved, function (compiled) {
                    if (!typescript.check(compiled)) {
                        callback({
                            script: '',
                            reflection: null,
                            errors: error_handler(compiled)
                        });

                        return;
                    }

                    var content = [];

                    var reflection = {
                        scripts: []
                    };

                    compiled.forEach(function (unit) {
                        content.push(unit.content);

                        reflection.scripts.push(unit.script);
                    });

                    callback({
                        script: content.join('\n'),
                        reflection: reflection,
                        errors: []
                    });
                });
            });
        };
        return Compiler;
    })();
    appex.Compiler = Compiler;
})(appex || (appex = {}));
//@ sourceMappingURL=Compiler.js.map
var appex;
(function (appex) {
    var Module = (function () {
        function Module(script, reflection) {
            this.script = script;

            this.reflection = reflection;

            this.handles = [];

            this.load_context();

            this.load_exports();
        }
        Module.prototype.get = function (handle) {
            var scope = this.context;

            for (var n in handle.scope) {
                scope = scope[handle.scope[n]];
            }

            return scope[(handle.type).name];
        };

        Module.prototype.load_context = function () {
            this.sandbox = {
                __dirname: node.path.dirname(process.mainModule.filename),
                __filename: node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js"),
                global: global,
                process: process,
                require: require,
                console: console,
                exports: {}
            };

            var script = node.vm.createScript(this.script, 'appex.module.js');

            script.runInNewContext(this.sandbox);

            this.context = this.sandbox.exports;
        };

        Module.prototype.load_exports = function () {
            var _this = this;
            var scope = [];

            this.reflection.scripts.forEach(function (script) {
                _this.load_script(scope, script);
            });
        };

        Module.prototype.load_variable = function (scope, variable) {
            if (variable.isExported) {
                this.handles.push(new appex.Handle(scope, variable));
            }
        };

        Module.prototype.load_parameter = function (scope, parameter) {
        };

        Module.prototype.load_method = function (scope, method) {
            var _this = this;
            if (method.isExported) {
                this.handles.push(new appex.Handle(scope, method));

                method.parameters.forEach(function (obj) {
                    _this.load_parameter(scope, obj);
                });
            }
        };

        Module.prototype.load_class = function (scope, _class) {
            var _this = this;
            if (_class.isExported) {
                this.handles.push(new appex.Handle(scope, _class));

                _class.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _class.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });
            }
        };

        Module.prototype.load_interface = function (scope, _interface) {
            var _this = this;
            if (_interface.isExported) {
                this.handles.push(new appex.Handle(scope, _interface));

                _interface.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _interface.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });
            }
        };

        Module.prototype.load_import = function (scope, _import) {
        };

        Module.prototype.load_module = function (scope, _module) {
            var _this = this;
            if (_module.isExported) {
                if (_module.name.indexOf("\"") == -1) {
                    scope.push(_module.name);
                }

                _module.modules.forEach(function (obj) {
                    _this.load_module(scope, obj);
                });

                _module.imports.forEach(function (obj) {
                    _this.load_import(scope, obj);
                });

                _module.interfaces.forEach(function (obj) {
                    _this.load_interface(scope, obj);
                });

                _module.classes.forEach(function (obj) {
                    _this.load_class(scope, obj);
                });

                _module.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _module.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });

                if (_module.name.indexOf("\"") == -1) {
                    scope.pop();
                }
            }
        };

        Module.prototype.load_script = function (scope, script) {
            var _this = this;
            script.modules.forEach(function (obj) {
                _this.load_module(scope, obj);
            });

            script.interfaces.forEach(function (obj) {
                _this.load_interface(scope, obj);
            });

            script.classes.forEach(function (obj) {
                _this.load_class(scope, obj);
            });

            script.methods.forEach(function (obj) {
                _this.load_method(scope, obj);
            });

            script.variables.forEach(function (obj) {
                _this.load_variable(scope, obj);
            });
        };

        Module.prototype.dispose = function () {
            this.sandbox = null;
        };
        return Module;
    })();
    appex.Module = Module;
})(appex || (appex = {}));
//@ sourceMappingURL=Module.js.map
var appex;
(function (appex) {
    var Host = (function () {
        function Host() {
            this.compiler = new appex.Compiler();

            this.routes = [];

            this.modules = [];

            this.server = null;
        }
        Host.prototype.bind = function (server) {
            var _this = this;
            this.server = server;

            var listeners = this.server.listeners('request');

            this.server.removeAllListeners('request');

            this.server.on('request', function (request, response) {
                _this.request_handler(request, response, function (handled) {
                    if (!handled) {
                        for (var n in listeners) {
                            listeners[n](request, response);
                        }
                    }
                });
            });
        };

        Host.prototype.read_body = function (request, callback) {
            var buffer = [];

            request.on('data', function (chunk) {
                buffer.push(chunk);
            });

            request.on('end', function () {
                callback(buffer.join(''));
            });
        };

        Host.prototype.error_handler = function (error, request, response) {
            response.writeHead(500, { 'content-type': 'text/plain' });

            response.write(error.toString());

            response.end();
        };

        Host.prototype.metadata = function (request, response) {
            response.writeHead(200, { 'content-type': 'text/plain' });

            response.write('appex web host: \n');

            for (var n in this.routes) {
                response.write('--------------------------------------------\n');

                response.write('url: ' + this.routes[n].url + '\n');

                response.write('request:\n');

                response.write(JSON.stringify(this.routes[n].requestType, null, ' ') + '\n');

                response.write('response:\n');

                response.write(JSON.stringify(this.routes[n].responseType, null, ' ') + '\n');
            }

            response.end();
        };

        Host.prototype.request_handler = function (request, response, callback) {
            var _this = this;
            if (this.routes.length == 0) {
                callback(false);

                return;
            }

            var handled = false;

            for (var n in this.routes) {
                var route = this.routes[n];

                if (route.url == request.url) {
                    handled = true;

                    var instance = route.instance;

                    instance.server = this.server;

                    instance.request = request;

                    instance.response = response;

                    var buffer = [];

                    this.read_body(request, function (buffer) {
                        var input = null;

                        try  {
                            input = JSON.parse(buffer);
                        } catch (e) {
                        }

                        try  {
                            route.call(input, function (output) {
                                var json = 'null';

                                if (output) {
                                    json = JSON.stringify(output, null, ' ');
                                }

                                response.writeHead(200, { 'content-type': 'application/json' });

                                response.write(json);

                                response.end();

                                callback(handled);
                            });
                        } catch (error) {
                            _this.error_handler(error.toString(), request, response);

                            callback(handled);

                            return;
                        }
                    });

                    break;
                }
            }
            callback(handled);
        };

        Host.prototype.require = function (source, callback) {
            var _this = this;
            this.compiler.compile(source, function (compiler_result) {
                if (compiler_result.errors.length > 0) {
                    for (var n in compiler_result.errors) {
                        console.log(compiler_result.errors[n]);
                    }

                    if (callback)
                        callback(null);

                    return;
                }

                if (compiler_result.errors.length == 0) {
                    var module = new appex.Module(compiler_result.script, compiler_result.reflection);

                    _this.modules.push(module);

                    module.handles.forEach(function (handle) {
                        if (handle.type.identifier == 'class') {
                            var typeinfo = handle.type;

                            typeinfo.extends.forEach(function (type) {
                                if (type.name == "appex.Controller") {
                                    var constructor = module.get(handle);

                                    var instance = new constructor();

                                    var baseurl = '/' + handle.scope.join('/') + '/' + typeinfo.name;

                                    baseurl = baseurl.toLowerCase();

                                    typeinfo.methods.forEach(function (method) {
                                        if (method.isConstructor == false) {
                                            if (method.isPublic == true) {
                                                if (method.parameters.length == 2) {
                                                    if (method.parameters[1].type.name == "Function") {
                                                        var route = new appex.Route();

                                                        route.instance = instance;

                                                        route.url = [baseurl, method.name].join('/').toLowerCase();

                                                        route.method = method.name;

                                                        route.requestType = method.parameters[0].type;

                                                        route.responseType = method.parameters[1].type.signature.parameters[0].type;

                                                        _this.routes.push(route);
                                                    }
                                                }
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    });

                    if (callback)
                        callback(module);
                }
            });
        };

        Host.prototype.dispose = function () {
            this.compiler.dispose();
        };
        return Host;
    })();
    appex.Host = Host;
})(appex || (appex = {}));
//@ sourceMappingURL=Host.js.map
exports.Worker = appex.Worker;

exports.Compiler = appex.Compiler;

exports.Module = appex.Module;

exports.Handle = appex.Handle;

exports.Host = appex.Host;

exports.Route = appex.Route;

exports.Controller = appex.Controller;
//@ sourceMappingURL=index.js.map
