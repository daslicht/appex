var node;
(function (node) {
    node.http = require('http');

    node.fs = require('fs');
})(node || (node = {}));

var tsapi = require('typescript.api');
//@ sourceMappingURL=references.js.map
var appex;
(function (appex) {
    (function (activation) {
        var Type = (function () {
            function Type() {
            }
            return Type;
        })();
        activation.Type = Type;

        var Reflection = (function () {
            function Reflection(scripts) {
                this.scripts = scripts;

                this.types = new Array();

                this.scope_stack = new Array();

                this.setup();
            }
            Reflection.prototype.setup = function () {
                var _this = this;
                this.types = [];

                this.scripts.forEach(function (script) {
                    _this.load_script(script);
                });
            };

            Reflection.prototype.gettype = function (typename) {
                for (var n in this.types) {
                    if (this.types[n].typename == typename) {
                        return this.types[n];
                    }
                }

                return null;
            };

            Reflection.prototype.load_variable = function (variable) {
            };

            Reflection.prototype.load_parameter = function (parameter) {
            };

            Reflection.prototype.load_method = function (method) {
                var _this = this;
                method.parameters.forEach(function (obj) {
                    _this.load_parameter(obj);
                });
            };

            Reflection.prototype.load_class = function (_class) {
                var _this = this;
                var scope = [];

                for (var i = 1; i < this.scope_stack.length; i++) {
                    scope.push(this.scope_stack[i]);
                }

                var type = new appex.activation.Type();

                type.disposition = 'class';

                type.typename = scope.join('.') + '.' + _class.name;

                type.typeinfo = _class;

                type.scope = scope;

                this.types.push(type);

                _class.methods.forEach(function (obj) {
                    _this.load_method(obj);
                });

                _class.variables.forEach(function (obj) {
                    _this.load_variable(obj);
                });
            };

            Reflection.prototype.load_interface = function (_interface) {
                var _this = this;
                var scope = [];

                for (var i = 1; i < this.scope_stack.length; i++) {
                    scope.push(this.scope_stack[i]);
                }

                var type = new appex.activation.Type();

                type.disposition = 'interface';

                type.typename = scope.join('.') + '.' + _interface.name;

                type.typeinfo = _interface;

                type.scope = scope;

                this.types.push(type);

                _interface.methods.forEach(function (obj) {
                    _this.load_method(obj);
                });

                _interface.variables.forEach(function (obj) {
                    _this.load_variable(obj);
                });
            };

            Reflection.prototype.load_import = function (_import) {
            };

            Reflection.prototype.load_module = function (_module) {
                var _this = this;
                this.scope_stack.push(_module.name);

                _module.modules.forEach(function (obj) {
                    _this.load_module(obj);
                });

                _module.imports.forEach(function (obj) {
                    _this.load_import(obj);
                });

                _module.interfaces.forEach(function (obj) {
                    _this.load_interface(obj);
                });

                _module.classes.forEach(function (obj) {
                    _this.load_class(obj);
                });

                _module.methods.forEach(function (obj) {
                    _this.load_method(obj);
                });

                _module.variables.forEach(function (obj) {
                    _this.load_variable(obj);
                });

                this.scope_stack.pop();
            };

            Reflection.prototype.load_script = function (script) {
                var _this = this;
                script.modules.forEach(function (obj) {
                    _this.load_module(obj);
                });

                script.interfaces.forEach(function (obj) {
                    _this.load_interface(obj);
                });

                script.classes.forEach(function (obj) {
                    _this.load_class(obj);
                });

                script.methods.forEach(function (obj) {
                    _this.load_method(obj);
                });

                script.variables.forEach(function (obj) {
                    _this.load_variable(obj);
                });
            };
            return Reflection;
        })();
        activation.Reflection = Reflection;
    })(appex.activation || (appex.activation = {}));
    var activation = appex.activation;
})(appex || (appex = {}));
//@ sourceMappingURL=Reflection.js.map
var appex;
(function (appex) {
    (function (activation) {
        var ActivationHandle = (function () {
            function ActivationHandle() {
            }
            ActivationHandle.prototype.activate = function () {
                try  {
                    return new this.constructor();
                } catch (e) {
                    return null;
                }
            };
            return ActivationHandle;
        })();
        activation.ActivationHandle = ActivationHandle;
    })(appex.activation || (appex.activation = {}));
    var activation = appex.activation;
})(appex || (appex = {}));
//@ sourceMappingURL=ActivationHandle.js.map
var appex;
(function (appex) {
    (function (servicehost) {
        var Route = (function () {
            function Route() {
            }
            Route.prototype.call = function (input, callback) {
                return this.instance[this.method](input, callback);
            };
            return Route;
        })();
        servicehost.Route = Route;
    })(appex.servicehost || (appex.servicehost = {}));
    var servicehost = appex.servicehost;
})(appex || (appex = {}));
//@ sourceMappingURL=Route.js.map
var appex;
(function (appex) {
    (function (activation) {
        var Runtime = (function () {
            function Runtime() {
                this.reflection = new appex.activation.Reflection([]);
            }
            Runtime.prototype.start = function (sourcefile, callback) {
                var _this = this;
                tsapi.reset();

                var sources = [sourcefile];

                tsapi.resolve(sources, function (resolved) {
                    tsapi.compile(resolved, function (compiled) {
                        tsapi.run(compiled, null, function (context) {
                            _this.context = context;

                            for (var n in compiled) {
                                _this.reflection.scripts.push(compiled[n].reflection);
                            }

                            _this.reflection.setup();

                            callback(_this.context, _this.reflection);
                        });
                    });
                });
            };
            return Runtime;
        })();
        activation.Runtime = Runtime;
    })(appex.activation || (appex.activation = {}));
    var activation = appex.activation;
})(appex || (appex = {}));
//@ sourceMappingURL=Runtime.js.map
var appex;
(function (appex) {
    (function (activation) {
        var ActivationContext = (function () {
            function ActivationContext(runtime) {
                this.runtime = runtime;

                this.handles = new Array();

                this.load_handles();
            }
            ActivationContext.prototype.load_handles = function () {
                var _this = this;
                this.runtime.reflection.types.forEach(function (type) {
                    var scope = _this.runtime.context;

                    for (var n in type.scope) {
                        try  {
                            scope = scope[type.scope[n]];
                        } catch (e) {
                            console.log('oh no');

                            scope = null;

                            break;
                        }
                    }

                    if (scope) {
                        if (scope[type.typeinfo.name]) {
                            var instance = new activation.ActivationHandle();

                            instance.constructor = scope[type.typeinfo.name];

                            instance.typename = type.typename;

                            instance.typeinfo = type.typeinfo;

                            _this.handles.push(instance);
                        }
                    }
                });
            };
            return ActivationContext;
        })();
        activation.ActivationContext = ActivationContext;
    })(appex.activation || (appex.activation = {}));
    var activation = appex.activation;
})(appex || (appex = {}));
//@ sourceMappingURL=ActivationContext.js.map
var appex;
(function (appex) {
    (function (servicehost) {
        var Field = (function () {
            function Field() {
            }
            return Field;
        })();
        servicehost.Field = Field;

        var Type = (function () {
            function Type() {
                this.fields = [];
            }
            return Type;
        })();
        servicehost.Type = Type;

        var Method = (function () {
            function Method() {
            }
            return Method;
        })();
        servicehost.Method = Method;

        var Service = (function () {
            function Service() {
                this.methods = [];
            }
            return Service;
        })();
        servicehost.Service = Service;

        var Meta = (function () {
            function Meta(activation) {
                var _this = this;
                this.activation = activation;

                this.types = [];

                this.services = [];

                activation.handles.forEach(function (handle) {
                    var type = _this.activation.runtime.reflection.gettype(handle.typename);

                    if (type) {
                        var _service = new appex.servicehost.Service();

                        _service.name = type.typename;

                        var _interface = type.typeinfo;

                        _interface.methods.forEach(function (method) {
                            var _method = new appex.servicehost.Method();

                            _method.name = method.name;

                            _method.input = 'any';

                            _method.output = 'any';

                            if (method.parameters.length == 1) {
                                _method.input = method.parameters[0].type.name;

                                _method.output = method.returns.name;
                            }

                            if (method.parameters.length == 2) {
                                if (method.parameters[1].type.name == "Function") {
                                    _method.input = method.parameters[0].type.name;

                                    if (method.parameters[1].type.signature.parameters.length > 0) {
                                        _method.output = method.parameters[1].type.signature.parameters[0].type.name;
                                    } else {
                                        _method.output = "void";
                                    }
                                }
                            }

                            _this.loadtype(_method.input);

                            _this.loadtype(_method.output);

                            _service.methods.push(_method);
                        });

                        _this.services.push(_service);
                    }
                });

                delete this.activation;
            }
            Meta.prototype.loadtype = function (typename) {
                var _this = this;
                if (typename == 'string' || typename == 'number' || typename == 'any' || typename == 'Date' || typename == 'void')
                    return;

                var type = this.activation.runtime.reflection.gettype(typename);

                if (type) {
                    var _interface = type.typeinfo;

                    var _type = new appex.servicehost.Type();

                    _type.name = _interface.name;

                    _interface.variables.forEach(function (variable) {
                        var _field = new appex.servicehost.Field();

                        _field.name = variable.name;

                        _field.type = variable.type.name;

                        _type.fields.push(_field);

                        _this.loadtype(_type.name);
                    });

                    this.types.push(_type);

                    return;
                }

                return null;
            };
            return Meta;
        })();
        servicehost.Meta = Meta;
    })(appex.servicehost || (appex.servicehost = {}));
    var servicehost = appex.servicehost;
})(appex || (appex = {}));
//@ sourceMappingURL=Meta.js.map
var appex;
(function (appex) {
    (function (servicehost) {
        var Host = (function () {
            function Host(activation) {
                this.activation = activation;

                this.setup_meta();

                this.setup_routes();
            }
            Host.prototype.setup_meta = function () {
                this.meta = new appex.servicehost.Meta(this.activation);
            };

            Host.prototype.setup_routes = function () {
                var _this = this;
                this.routes = new Array();

                this.activation.handles.forEach(function (handle) {
                    var instance = handle.activate();

                    var basepath = '/' + handle.typename.replace(/\./g, '/');

                    basepath = basepath.replace(/\/\//g, '/');

                    handle.typeinfo.methods.forEach(function (method) {
                        if (!method.isConstructor) {
                            var route = new appex.servicehost.Route();

                            route.path = [basepath, method.name].join('/').toLowerCase();

                            route.instance = instance;

                            route.method = method.name;

                            if (method.parameters.length == 1) {
                                route.async = false;

                                route.input = method.parameters[0].type;

                                route.output = method.returns;
                            }

                            if (method.parameters.length == 2) {
                                if (method.parameters[1].type.name == "Function") {
                                    route.async = true;

                                    route.input = method.parameters[0].type;

                                    route.output = method.parameters[1].type;
                                }
                            }

                            _this.routes.push(route);
                        }
                    });
                });
            };

            Host.prototype.read_body = function (request, callback) {
                var buffer = [];

                request.on('data', function (chunk) {
                    buffer.push(chunk);
                });

                request.on('end', function () {
                    callback(buffer.join(''));
                });
            };

            Host.prototype.error_handler = function (error, request, response) {
                response.writeHead(500, { 'content-type': 'text/plain' });

                response.write(error.toString());

                response.end();
            };

            Host.prototype.discovery_handler = function (request, response) {
                response.writeHead(200, { 'content-type': 'text/plain' });

                response.write('output meta info here.');

                response.end();
            };

            Host.prototype.route_handler = function (context, request, response, callback) {
                var _this = this;
                if (this.routes.length == 0) {
                    callback(false);

                    return;
                }

                var handled = false;

                for (var n in this.routes) {
                    var route = this.routes[n];

                    if (route.path == request.url) {
                        handled = true;

                        route.instance.context = context;

                        var buffer = [];

                        this.read_body(request, function (buffer) {
                            var input = null;

                            try  {
                                input = JSON.parse(buffer);
                            } catch (e) {
                            }

                            try  {
                                if (route.async) {
                                    route.call(input, function (output) {
                                        var json = 'null';

                                        if (output) {
                                            json = JSON.stringify(output, null, ' ');
                                        }

                                        response.writeHead(200, { 'content-type': 'application/json' });

                                        response.write(json);

                                        response.end();

                                        callback(handled);
                                    });
                                } else {
                                    var output = route.call(input);

                                    var json = 'null';

                                    if (output) {
                                        json = JSON.stringify(output, null, ' ');
                                    }

                                    response.writeHead(200, { 'content-type': 'application/json' });

                                    response.write(json);

                                    response.end();

                                    callback(handled);

                                    return;
                                }
                            } catch (error) {
                                _this.error_handler(error.toString(), request, response);

                                callback(handled);

                                return;
                            }
                        });

                        break;
                    }
                }
                callback(handled);
            };

            Host.prototype.bind = function (server) {
                var _this = this;
                var listeners = server.listeners('request');

                server.removeAllListeners('request');

                server.on('request', function (request, response) {
                    if (request.url == '/appex') {
                        if (_this.discovery) {
                            _this.discovery_handler(request, response);

                            return;
                        }
                    }

                    var context = {
                        server: server,
                        request: request,
                        response: response
                    };

                    _this.route_handler(context, request, response, function (handled) {
                        if (!handled) {
                            for (var n in listeners) {
                                listeners[n](request, response);
                            }
                        }
                    });
                });
            };

            Host.prototype.call = function (path, input) {
                for (var n in this.routes) {
                    if (this.routes[n].path == path) {
                        var output = this.routes[n].call(input);

                        return output;
                    }
                }

                return null;
            };
            return Host;
        })();
        servicehost.Host = Host;
    })(appex.servicehost || (appex.servicehost = {}));
    var servicehost = appex.servicehost;
})(appex || (appex = {}));
//@ sourceMappingURL=Host.js.map
function create_runtime(source, callback) {
    var runtime = new appex.activation.Runtime();

    runtime.start(source, function (context, reflection) {
        callback(runtime);
    });
}

function create_activation_context(runtime, callback) {
    var activation = new appex.activation.ActivationContext(runtime);

    callback(activation);
}

function create_service_host(activation_context, callback) {
    var host = new appex.servicehost.Host(activation_context);

    callback(host);
}

function host(source, callback) {
    create_runtime(source, function (runtime) {
        create_activation_context(runtime, function (activation_context) {
            create_service_host(activation_context, function (service_host) {
                callback(service_host);
            });
        });
    });
}
exports.host = host;

function call(endpoint, input, callback) {
}
exports.call = call;

//@ sourceMappingURL=index.js.map
