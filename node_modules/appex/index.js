//@ sourceMappingURL=interfaces.js.map
//@ sourceMappingURL=CompilerResult.js.map
var appex;
(function (appex) {
    var StopWatch = (function () {
        function StopWatch() {
        }
        StopWatch.prototype.start = function () {
            this.starttime = new Date();
        };

        StopWatch.prototype.stop = function () {
            if (this.starttime) {
                var stoptime = new Date();

                var offset = stoptime.getMilliseconds() - this.starttime.getMilliseconds();

                if (offset < 0)
                    offset = -offset;

                return offset;
            }

            return 0;
        };
        return StopWatch;
    })();
    appex.StopWatch = StopWatch;
})(appex || (appex = {}));
//@ sourceMappingURL=StopWatch.js.map
var node;
(function (node) {
    node.http = require('http');

    node.fs = require('fs');

    node.vm = require('vm');

    node.path = require('path');

    node.child_process = require('child_process');

    node.url = require('url');
})(node || (node = {}));
//@ sourceMappingURL=references.js.map
var appex;
(function (appex) {
    var ModuleExport = (function () {
        function ModuleExport(scope, type) {
            this.scope = scope.slice(0);

            this.type = type;
        }
        return ModuleExport;
    })();
    appex.ModuleExport = ModuleExport;
})(appex || (appex = {}));
//@ sourceMappingURL=ModuleExport.js.map
var appex;
(function (appex) {
    var Route = (function () {
        function Route(moduleExport) {
            this.moduleExport = moduleExport;

            this.path = '';

            this.type = 'unknown';

            this.regexp = null;

            this.inputType = null;

            this.outputType = null;

            this.setup();
        }
        Route.prototype.match = function (path) {
            if (this.type == 'wildcard') {
                return this.regexp.test(path);
            } else {
                return path == this.path;
            }
        };

        Route.prototype.parameters = function (path) {
            var result = [];

            var match = this.regexp.exec(path);

            if (match) {
                var method = this.moduleExport.type;

                var index = 0;

                for (var n in match) {
                    if (n != '0' && n != 'index' && n != 'input') {
                        var arg = match[n];

                        if (method.parameters[index + 1].type.name == 'number') {
                            arg = parseFloat(arg);
                        }

                        result.push(arg);

                        index += 1;
                    }
                }
            }
            return result;
        };

        Route.prototype.setup = function () {
            if (this.moduleExport.type.identifier == "method") {
                this.setup_url(this.moduleExport.type);

                this.setup_type(this.moduleExport.type);

                if (this.type == 'wildcard') {
                    this.setup_wildcard(this.moduleExport.type);
                }
            } else {
                this.type = 'invalid';
            }
        };

        Route.prototype.setup_url = function (method) {
            var name = method.name.toLowerCase();

            if (this.moduleExport.scope.length == 0) {
                this.path = name == 'index' ? "/" : '/' + name;
            } else {
                this.path = name == 'index' ? ('/' + this.moduleExport.scope.join('/')) : ('/' + this.moduleExport.scope.join('/') + '/' + name);
            }
        };

        Route.prototype.setup_type = function (method) {
            if (method.name == 'wildcard') {
                if (method.parameters.length > 1) {
                    this.type = 'wildcard';

                    return;
                }
            }

            if (method.parameters.length == 1) {
                this.type = 'handler';

                return;
            }

            if (method.parameters.length == 3) {
                if (method.parameters[2].type.name == "Function") {
                    if (method.parameters[2].type.signature.parameters.length == 1) {
                        if (method.parameters[2].type.signature.parameters[0].type.name != "Function") {
                            this.type = 'method';

                            this.inputType = method.parameters[1].type;

                            this.outputType = method.parameters[2].type.signature.parameters[0].type;

                            return;
                        }
                    }
                }
            }

            this.type = 'invalid';
        };

        Route.prototype.setup_wildcard = function (method) {
            var buffer = [];

            buffer.push("^");

            buffer.push('/', this.moduleExport.scope.join('/'));

            for (var i = 1; i < method.parameters.length; i++) {
                if (method.parameters[i].type.name == 'number') {
                    buffer.push('/([0-9]*)');
                } else {
                    buffer.push('/(.*)');
                }
            }

            buffer.push('$');

            this.regexp = new RegExp(buffer.join(''));
        };
        return Route;
    })();
    appex.Route = Route;
})(appex || (appex = {}));
//@ sourceMappingURL=Route.js.map
var appex;
(function (appex) {
    var RuntimeOptions = (function () {
        function RuntimeOptions(options) {
            this.sourcefile = null;

            this.devmode = false;

            this.logging = false;

            this.stdout = process.stdout;

            this.stdout = process.stdout;

            if (options.sourcefile)
                this.sourcefile = options.sourcefile;

            if (options.devmode)
                this.devmode = options.devmode;

            if (options.logging)
                this.logging = options.logging;

            if (options.stdout)
                this.stdout = options.stdout;

            if (options.stderr)
                this.stderr = options.stderr;

            if (this.sourcefile == null)
                throw new Error('appex: sourcefile required.');
        }
        return RuntimeOptions;
    })();
    appex.RuntimeOptions = RuntimeOptions;
})(appex || (appex = {}));
//@ sourceMappingURL=RuntimeOptions.js.map
var appex;
(function (appex) {
    var RuntimeRequest = (function () {
        function RuntimeRequest(serverRequest, serverResponse, next) {
            this.serverRequest = serverRequest;
            this.serverResponse = serverResponse;
            this.next = next;
            this.stopwatch = new appex.StopWatch();

            this.stopwatch.start();
        }
        return RuntimeRequest;
    })();
    appex.RuntimeRequest = RuntimeRequest;
})(appex || (appex = {}));
//@ sourceMappingURL=RuntimeRequest.js.map
var appex;
(function (appex) {
    var Message = (function () {
        function Message() {
        }
        return Message;
    })();

    var Waiter = (function () {
        function Waiter(messageid, delegate) {
            this.messageid = messageid;
            this.delegate = delegate;
        }
        return Waiter;
    })();

    var Worker = (function () {
        function Worker(delegate) {
            var _this = this;
            this.delegate = delegate;
            this.message_index = 0;

            this.waiters = new Array();

            var message = new Message();

            message.messageid = 0;

            message.type = 'setup';

            message.body = {
                code: this.delegate.toString(),
                filename: process.mainModule.filename
            };

            this.child_process = node.child_process.fork(__dirname + '/kernel.js');

            this.child_process.on('message', function (message) {
                _this.dispatch(message);
            });

            this.child_process.send(message, null);
        }
        Worker.prototype.dispatch = function (message) {
            for (var i = 0; i < this.waiters.length; i++) {
                if (this.waiters[i].messageid == message.messageid) {
                    this.waiters[i].delegate(message.body);

                    this.waiters.splice(i, 1);

                    break;
                }
            }
        };

        Worker.prototype.call = function (request, callback) {
            this.waiters.push(new Waiter(this.message_index, callback));

            var message = new Message();

            message.messageid = this.message_index;

            message.type = 'call';

            message.body = request;

            this.child_process.send(message, null);

            this.message_index = this.message_index + 1;
        };

        Worker.prototype.dispose = function () {
            try  {
                this.child_process.kill();
            } catch (error) {
            }
        };
        return Worker;
    })();
    appex.Worker = Worker;
})(appex || (appex = {}));
//@ sourceMappingURL=Worker.js.map
var appex;
(function (appex) {
    var Compiler = (function () {
        function Compiler() {
            this.worker = new appex.Worker(this.kernel);
        }
        Compiler.prototype.compile = function (filename, callback) {
            this.worker.call(filename, callback);
        };

        Compiler.prototype.dispose = function () {
            this.worker.dispose();
        };

        Compiler.prototype.kernel = function (filename, callback) {
            var gather_diagnostics = function (units) {
                var diagnostics = [];

                units.forEach(function (unit) {
                    unit.diagnostics.forEach(function (diagnostic) {
                        diagnostics.push(diagnostic);
                    });
                });

                return diagnostics;
            };

            var typescript = require('typescript.api');

            var errors = [];

            typescript.resolve([filename], function (resolved) {
                if (!typescript.check(resolved)) {
                    callback({
                        javascript: '',
                        reflection: null,
                        diagnostics: gather_diagnostics(resolved)
                    });

                    return;
                }

                typescript.compile(resolved, function (compiled) {
                    if (!typescript.check(compiled)) {
                        callback({
                            javascript: '',
                            reflection: null,
                            diagnostics: gather_diagnostics(compiled)
                        });

                        return;
                    }

                    var content = [];

                    var reflection = {
                        scripts: []
                    };

                    compiled.forEach(function (unit) {
                        content.push(unit.content);

                        reflection.scripts.push(unit.script);
                    });

                    callback({
                        javascript: content.join('\n'),
                        reflection: reflection,
                        diagnostics: []
                    });
                });
            });
        };
        return Compiler;
    })();
    appex.Compiler = Compiler;
})(appex || (appex = {}));
//@ sourceMappingURL=Compiler.js.map
var appex;
(function (appex) {
    var Module = (function () {
        function Module(javascript, reflection) {
            this.javascript = javascript;
            this.reflection = reflection;
            this.load_context();

            this.load_exports();
        }
        Module.prototype.get = function (moduleExport) {
            var scope = this.context.exports;

            for (var n in moduleExport.scope) {
                scope = scope[moduleExport.scope[n]];
            }

            return scope[(moduleExport.type).name];
        };

        Module.prototype.load_context = function () {
            this.context = {
                __dirname: node.path.dirname(process.mainModule.filename),
                __filename: node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js"),
                global: global,
                process: process,
                require: require,
                console: console,
                exports: {}
            };

            var script = node.vm.createScript(this.javascript, 'appex.module.js');

            script.runInNewContext(this.context);
        };

        Module.prototype.load_exports = function () {
            var _this = this;
            this.exports = [];

            var scope = [];

            this.reflection.scripts.forEach(function (script) {
                _this.load_script(scope, script);
            });
        };

        Module.prototype.load_variable = function (scope, variable) {
            if (variable.isExported) {
                this.exports.push(new appex.ModuleExport(scope, variable));
            }
        };

        Module.prototype.load_parameter = function (scope, parameter) {
        };

        Module.prototype.load_method = function (scope, method) {
            var _this = this;
            if (method.isExported) {
                this.exports.push(new appex.ModuleExport(scope, method));

                method.parameters.forEach(function (obj) {
                    _this.load_parameter(scope, obj);
                });
            }
        };

        Module.prototype.load_class = function (scope, _class) {
            var _this = this;
            if (_class.isExported) {
                this.exports.push(new appex.ModuleExport(scope, _class));

                _class.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _class.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });
            }
        };

        Module.prototype.load_interface = function (scope, _interface) {
            var _this = this;
            if (_interface.isExported) {
                this.exports.push(new appex.ModuleExport(scope, _interface));

                _interface.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _interface.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });
            }
        };

        Module.prototype.load_import = function (scope, _import) {
        };

        Module.prototype.load_module = function (scope, _module) {
            var _this = this;
            if (_module.isExported) {
                if (_module.name.indexOf("\"") == -1) {
                    scope.push(_module.name);
                }

                _module.modules.forEach(function (obj) {
                    _this.load_module(scope, obj);
                });

                _module.imports.forEach(function (obj) {
                    _this.load_import(scope, obj);
                });

                _module.interfaces.forEach(function (obj) {
                    _this.load_interface(scope, obj);
                });

                _module.classes.forEach(function (obj) {
                    _this.load_class(scope, obj);
                });

                _module.methods.forEach(function (obj) {
                    _this.load_method(scope, obj);
                });

                _module.variables.forEach(function (obj) {
                    _this.load_variable(scope, obj);
                });

                if (_module.name.indexOf("\"") == -1) {
                    scope.pop();
                }
            }
        };

        Module.prototype.load_script = function (scope, script) {
            var _this = this;
            script.modules.forEach(function (obj) {
                _this.load_module(scope, obj);
            });

            script.interfaces.forEach(function (obj) {
                _this.load_interface(scope, obj);
            });

            script.classes.forEach(function (obj) {
                _this.load_class(scope, obj);
            });

            script.methods.forEach(function (obj) {
                _this.load_method(scope, obj);
            });

            script.variables.forEach(function (obj) {
                _this.load_variable(scope, obj);
            });
        };

        Module.prototype.dispose = function () {
            this.context = null;
        };
        return Module;
    })();
    appex.Module = Module;
})(appex || (appex = {}));
//@ sourceMappingURL=Module.js.map
var appex;
(function (appex) {
    var Router = (function () {
        function Router(module) {
            var _this = this;
            this.module = module;
            this.routes = [];

            this.module.exports.forEach(function (handle) {
                var route = new appex.Route(handle);

                if (route.type != 'invalid') {
                    _this.routes.push(route);
                }
            });
        }
        Router.prototype.read_request_object = function (request, callback) {
            var buffer = [];

            request.on('data', function (chunk) {
                buffer.push(chunk);
            });

            request.on('end', function () {
                try  {
                    var obj = JSON.parse(buffer.join(''));

                    callback(obj);
                } catch (error) {
                    callback(null);
                }
            });
        };

        Router.prototype.write_response_object = function (output, response, callback) {
            try  {
                var json = JSON.stringify(output, null, '');

                response.writeHead(200, { 'content-type': 'application/json' });

                response.write(json);

                response.end();
            } catch (error) {
                response.writeHead(200, { 'content-type': 'application/json' });

                response.write(error.toString());

                response.end();
            }

            callback();
        };

        Router.prototype.request_handler = function (serverRequest, serverResponse, next) {
            var _this = this;
            var url = node.url.parse(serverRequest.url);

            for (var n in this.routes) {
                var route = this.routes[n];

                if (route.match(url.pathname)) {
                    var method = this.module.get(route.moduleExport);

                    var appex_request = serverRequest;

                    var appex_response = serverResponse;

                    appex_response.writeFile = function (mime, filename) {
                        serverResponse.writeHead(200, { 'content-type': mime });

                        node.fs.readFile(filename, function (error, data) {
                            if (error) {
                                serverResponse.write(error.message);

                                serverResponse.end();

                                return;
                            }

                            serverResponse.write(data);

                            serverResponse.end();
                        });
                    };

                    var context = {
                        request: appex_request,
                        response: appex_response,
                        routes: this.routes,
                        reflection: this.module.reflection,
                        exports: this.module.exports
                    };

                    switch (route.type) {
                        case 'handler':
                            method(context);

                            break;

                        case 'method':
                            this.read_request_object(serverRequest, function (input) {
                                method(context, input, function (output) {
                                    _this.write_response_object(output, serverResponse, function () {
                                    });
                                });
                            });

                            break;

                        case 'wildcard':
                            var arguments = route.parameters(url.pathname);

                            arguments.unshift(context);

                            method.apply(this, arguments);

                            break;
                    }

                    return true;
                }
            }

            if (next) {
                next();
            }

            return false;
        };
        return Router;
    })();
    appex.Router = Router;
})(appex || (appex = {}));
//@ sourceMappingURL=Router.js.map
var appex;
(function (appex) {
    var Runtime = (function () {
        function Runtime(options) {
            this.compiler = new appex.Compiler();

            this.options = new appex.RuntimeOptions(options);

            this.module = null;

            this.router = null;

            this.runtime_request_queue = [];

            this.compiled = false;

            this.compiling = false;

            this.options.stdout.write('appex ');

            this.options.devmode ? this.options.stdout.write('\033[32m- development mode\033[0m\n') : this.options.stdout.write('\n');
        }
        Runtime.prototype.request_handler = function (serverRequest, serverResponse, next) {
            var _this = this;
            this.runtime_request_queue.push(new appex.RuntimeRequest(serverRequest, serverResponse, next));

            this.prepare_module_and_router(function (diagnostics) {
                if (diagnostics) {
                    while (_this.runtime_request_queue.length > 0) {
                        var request = _this.runtime_request_queue.pop();

                        request.serverResponse.writeHead(500, { 'content-type': 'text/plain' });

                        diagnostics.forEach(function (diagnostic) {
                            var message = [];

                            message.push(diagnostic.path);

                            message.push(" [", (diagnostic.line_index + 1).toString(), ":", (diagnostic.char_index + 1).toString(), "] ");

                            message.push(diagnostic.message, '\n');

                            request.serverResponse.write(message.join(''));

                            if (_this.options.logging) {
                                _this.options.stderr.write(message.join(''));
                            }
                        });

                        request.serverResponse.end();
                    }

                    return;
                }

                while (_this.runtime_request_queue.length > 0) {
                    var request = _this.runtime_request_queue.pop();

                    var handled = _this.router.request_handler(request.serverRequest, request.serverResponse, request.next);

                    if (handled) {
                        if (_this.options.logging) {
                            var message = [];

                            message.push(request.serverRequest.method, ' ');

                            message.push('[', request.stopwatch.stop().toString(), 'ms] ');

                            message.push(request.serverRequest.url, '\n');

                            _this.options.stdout.write(message.join(''));
                        }
                    }
                }
            });
        };

        Runtime.prototype.prepare_module_and_router = function (callback) {
            var _this = this;
            if (this.options.devmode) {
                this.compiled = false;
            }

            if (this.compiled) {
                callback(null);
            }

            if (!this.compiled) {
                this.compiling = true;

                this.compiler.compile(this.options.sourcefile, function (result) {
                    _this.compiling = false;

                    if (result.diagnostics.length > 0) {
                        callback(result.diagnostics);

                        return;
                    }

                    _this.module = new appex.Module(result.javascript, result.reflection);

                    _this.router = new appex.Router(_this.module);

                    _this.compiled = true;

                    callback(null);

                    if (!_this.options.devmode) {
                        _this.compiler.dispose();
                    }
                });
            }
        };

        Runtime.prototype.dispose = function () {
            this.compiler.dispose();

            this.module.dispose();
        };
        return Runtime;
    })();
    appex.Runtime = Runtime;
})(appex || (appex = {}));
//@ sourceMappingURL=Runtime.js.map
exports.Worker = appex.Worker;

exports.Compiler = appex.Compiler;

exports.Module = appex.Module;

exports.ModuleExport = appex.ModuleExport;

exports.Router = appex.Router;

exports.Route = appex.Route;

exports.Runtime = appex.Runtime;

function runtime(options) {
    var runtime = new appex.Runtime(options);

    return function (request, response, next) {
        runtime.request_handler(request, response, next);
    };
}
exports.runtime = runtime;

//@ sourceMappingURL=index.js.map
