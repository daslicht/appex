// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../decl/references.ts" />
/// <reference path="Reflection.ts" />

module appex.activation 
{
	export class Runtime
	{
		public context : any;

		public reflection : appex.activation.Reflection;

		constructor() 
		{
			this.reflection = new appex.activation.Reflection([]);
		}
		
        public diagnostics(units:typescript.api.Unit[]) : void {
        
            units.forEach((unit) =>{
            
                unit.diagnostics.forEach((diagnostic) =>{
                
                    console.log(diagnostic.toString());
                });
            });
        }

		public start(sourcefile:string, callback:(context:any, reflection:appex.activation.Reflection)=>void) : void {
		
			tsapi.reset();

			var sources = [sourcefile];

			tsapi.resolve(sources, (resolved) => {
                
                if(!tsapi.check(resolved)) { 
                
                    this.diagnostics(resolved);

                    callback(null, null);

                    return;

                }

				tsapi.compile(resolved, (compiled) => {
					
                    if(!tsapi.check(compiled)) { 
                
                        this.diagnostics(compiled);

                        callback(null, null);

                        return;
                    }

					tsapi.run(compiled, null, (context) => {
						
						this.context = context;

						for(var n in compiled) 
						{
							this.reflection.scripts.push(compiled[n].reflection);
						}

                        this.reflection.setup();

						callback(this.context, this.reflection);
					});
				});
			});
		}
	}
}