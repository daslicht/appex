// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../decl/references.ts" />
/// <reference path="Runtime.ts" />
/// <reference path="ActivationHandle.ts" />

module appex.activation
{    
    export class ActivationContext
    {
        private runtime     : appex.activation.Runtime;

        public handles      : Array<ActivationHandle>;
        
        private scope_stack : Array<string>;

        constructor(runtime:appex.activation.Runtime)
        {
            this.runtime     = runtime;

            this.scope_stack = new Array<string>();

            this.handles     = new Array<ActivationHandle>();

            this.runtime.reflection.scripts.forEach((script)=> {
                
               this.load_script(script);

            });

            delete this.scope_stack;
        }
        
        private load_handle(_class:typescript.api.Class) : void 
        {    
            var scope = this.runtime.context;
    
            var stack = [];

            for(var i = 1; i < this.scope_stack.length; i++) {
               
                stack.push(this.scope_stack[i]);
            }

            for(var n in stack) { 

                try
                {
                    scope = scope[stack[n]];
                }
                catch(e) 
                {
                    
                    scope = null;

                    break;
                }
        
            }
            
            if(scope) 
            {   
                if(scope[_class.name])
                {
                    var instance  = new ActivationHandle();

                    instance.typename        = stack.join('.') + '.' + _class.name;

                    instance.constructor = scope[_class.name];

                    instance.typeinfo    = _class;

                    this.handles.push(instance); 
                }  
            }
        }
        
        private load_module(_module:typescript.api.Module) 
        {
            this.scope_stack.push(_module.name);
            
                _module.modules.forEach    ((obj) => { this.load_module(obj); }); 

                _module.imports.forEach    ((obj) => { this.load_import(obj); }); 

                _module.interfaces.forEach ((obj) => { this.load_interface(obj); });  
     
                _module.classes.forEach    ((obj) => { this.load_class(obj); }); 

                _module.methods.forEach    ((obj) => { this.load_method(obj); }); 

                _module.variables.forEach  ((obj) => { this.load_variable(obj); }); 

            this.scope_stack.pop();
        }

        private load_import(_import:typescript.api.Import) 
        {
            
        }

        private load_class(_class:typescript.api.Class) 
        {
            this.load_handle(_class);

            _class.methods.forEach    ((obj) => { this.load_method(obj); });

            _class.variables.forEach  ((obj) => { this.load_variable(obj); });
        }

        private load_interface(_interface:typescript.api.Interface) 
        {    
            _interface.methods.forEach    ((obj) => { this.load_method(obj); });

            _interface.variables.forEach  ((obj) => { this.load_variable(obj); });
        }

        private load_method(method:typescript.api.Method) 
        {    
            method.parameters.forEach((obj) => { this.load_parameter(obj); });
        }

        private load_parameter(parameter:typescript.api.Parameter) 
        {
            
        }

        private load_variable(variable:typescript.api.Variable) 
        {
            
        }

        private load_script(script:typescript.api.Script) {

            script.modules.forEach    ((obj) => { this.load_module(obj); });
     
            script.interfaces.forEach ((obj) => { this.load_interface(obj); }); 
    
            script.classes.forEach    ((obj) => { this.load_class(obj); });
    
            script.methods.forEach    ((obj) => {this.load_method(obj); });
    
            script.variables.forEach  ((obj) => {this.load_variable(obj); });
        }
    }
}