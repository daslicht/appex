// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../decl/references.ts" />
/// <reference path="Runtime.ts" />
/// <reference path="ActivationHandle.ts" />

module appex.activation
{    
    export class ActivationContext
    {
        public runtime      : appex.activation.Runtime;

        public handles      : Array<ActivationHandle>;
        
        constructor(runtime:appex.activation.Runtime)
        {
            this.runtime     = runtime;
            
            this.handles     = new Array<ActivationHandle>();

            this.load_handles()
        }
        
        private load_handles() : void 
        {   
            this.runtime.reflection.types.forEach((type) => {
                
                var scope = this.runtime.context;
                
                for(var n in type.scope) { 

                    try
                    {
                        scope = scope[type.scope[n]];
                    }
                    catch(e) 
                    {
                        scope = null;

                        break;
                    }
                }
                
                if(scope) 
                {   
                    if(scope[type.typeinfo.name])
                    {
                        var instance  = new ActivationHandle();

                        instance.constructor = scope[type.typeinfo.name];

                        instance.typename    = type.typename;

                        instance.typeinfo    = type.typeinfo;

                        this.handles.push(instance); 
                    }  
                }
            });
        }
    }
}