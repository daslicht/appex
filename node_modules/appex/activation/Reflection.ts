// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../decl/references.ts" />

module appex.activation {

    export class Type {
        
        public disposition : string;

        public typename    : string;
        
        public typeinfo    :  any;

        public scope       : string[];
    }

    export class Reflection 
	{	
		public  scripts     : Array<typescript.api.Script>;

        private scope_stack : Array<string>;

        public  types       : Array<appex.activation.Type>;

		constructor(scripts : Array<typescript.api.Script>)
		{
			this.scripts     = scripts;

            this.types       = new Array<appex.activation.Type>();

            this.scope_stack = new Array<string>();

            this.setup();
		}

        public setup(): void {
            
            this.types = [];

            this.scripts.forEach((script) => {
            
                this.load_script(script);
                
            });
        }

        public locate (typename:string) : any {
        
            for(var n in this.types) {
                
                if(this.types[n].typename == typename) {
                
                    return this.types[n];
                }
            }

            return null;
        }
        
        private load_variable(variable:typescript.api.Variable) 
        {
            
        }
        
        private load_parameter(parameter:typescript.api.Parameter) 
        {
            
        }

        private load_method(method:typescript.api.Method) 
        {    
            method.parameters.forEach((obj) => { this.load_parameter(obj); });
        }
        
        private load_class(_class:typescript.api.Class) 
        {    
            var scope = [];

            for(var i = 1; i < this.scope_stack.length; i++) {
               
                scope.push(this.scope_stack[i]);
            }

            var type         = new appex.activation.Type();
            
            type.disposition = 'class';

            type.typename    = scope.join('.') + '.' + _class.name
            
            type.typeinfo    = _class;

            type.scope       = scope;

            this.types.push(type);
            
            _class.methods.forEach    ((obj) => { this.load_method(obj); });

            _class.variables.forEach  ((obj) => { this.load_variable(obj); });
        }

        private load_interface(_interface:typescript.api.Interface) 
        {   
            var scope = [];

            for(var i = 1; i < this.scope_stack.length; i++) {
               
                scope.push(this.scope_stack[i]);
            }

            var type      = new appex.activation.Type();
            
            type.disposition = 'interface';

            type.typename = scope.join('.') + '.' + _interface.name
            
            type.typeinfo = _interface;

            type.scope    = scope;

            this.types.push(type);

            _interface.methods.forEach    ((obj) => { this.load_method(obj); });

            _interface.variables.forEach  ((obj) => { this.load_variable(obj); });
        }

        private load_import(_import:typescript.api.Import) 
        {
            // do nothing...    
        }

        private load_module(_module:typescript.api.Module) 
        {
            this.scope_stack.push(_module.name);
            
            _module.modules.forEach    ((obj) => { this.load_module(obj); }); 

            _module.imports.forEach    ((obj) => { this.load_import(obj); }); 

            _module.interfaces.forEach ((obj) => { this.load_interface(obj); });  
     
            _module.classes.forEach    ((obj) => { this.load_class(obj); }); 

            _module.methods.forEach    ((obj) => { this.load_method(obj); }); 

            _module.variables.forEach  ((obj) => { this.load_variable(obj); }); 

            this.scope_stack.pop();
        }

        private load_script(script:typescript.api.Script) {

            script.modules.forEach    ((obj) => { this.load_module(obj); });
     
            script.interfaces.forEach ((obj) => { this.load_interface(obj); }); 
    
            script.classes.forEach    ((obj) => { this.load_class(obj); });
    
            script.methods.forEach    ((obj) => { this.load_method(obj); });
    
            script.variables.forEach  ((obj) => { this.load_variable(obj); });
        }
	}
}