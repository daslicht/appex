/// <reference path="../interfaces.ts" />
/// <reference path="../workers/Worker.ts" />

module appex.compilers {
    
    export interface Result {
        
        errors     : string[];

        script     : string;

        reflection : typescript.api.Reflection;
    }

    export class Compiler implements appex.IDisposable {
        
        private worker: appex.workers.Worker<string, appex.compilers.Result>;

        constructor() {
            
            this.worker = new appex.workers.Worker<string, appex.compilers.Result>( this.kernel );
            
        }
        
        public compile(filename:string, callback:(result:appex.compilers.Result)=>void) : void {
        
            this.worker.call(filename, callback);

        }

        public dispose() : void {
        
            this.worker.dispose();

        }

        // code executed in worker process.
        private kernel (filename:string, callback:(result:appex.compilers.Result)=>void) : void {
            
            var error_handler = function(units:typescript.api.Unit[]) : string [] {
                
                var errors = [];

                units.forEach((unit) => {
                    
                    unit.diagnostics.forEach((diagnostic) => {

                        errors.push(diagnostic.toString());
                    });

                });

                return errors;
            }
            
            var typescript = <typescript.api>require('typescript.api');

            typescript.reset();

            var errors = [];

            typescript.resolve([filename], (resolved)=> {
                
                if(!typescript.check(resolved)) {

                    callback({
                        
                        script    : '',
                        
                        reflection : null,

                        errors     : error_handler(resolved)
                    });

                    return;
                }

                typescript.compile(resolved, (compiled)=> {
                    
                    if(!typescript.check(compiled)) {

                        callback({
                        
                            script     : '',
                        
                            reflection : null,

                            errors     : error_handler(compiled)
                        });

                        return; 
                    }                   

                    // create compiler result.
                    
                    var content    = [];

                    var reflection = {
                    
                        scripts: []
                    };

                    compiled.forEach((unit) => {
                    
                        content.push(unit.content);

                        reflection.scripts.push(unit.script);
                    });
                    
                    callback({
                        
                        script     : content.join('\n'),
                        
                        reflection : <typescript.api.Reflection>reflection,

                        errors     : []
                    });
                });
            });
        }
    }
}