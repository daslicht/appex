// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../references.ts" />

module appex.modules {
    
    /** module reflection api */
    export class Reflection {
        
        /** arguments:
        *
        *      scripts: the scripts return from a appex compile.
        */
        constructor(public scripts: typescript.api.Script[]) {
            

        }

        public get(qualifier:string) : typescript.api.ReflectedType {
            
            var stack     = [];

            for(var n in this.scripts) {

                var reflected_type = this.scan_script( qualifier, stack, this.scripts[n]);

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            return null;
        }

        private scan_variable  (qualifier:string, stack:string[], variable:typescript.api.Variable) : typescript.api.ReflectedType {
            
            if(qualifier == stack.join('.')){
            
                return variable;
            }

            return null;
        }

        private scan_method    (qualifier:string, stack:string[], method:typescript.api.Method) : typescript.api.ReflectedType {
            
            if(qualifier == stack.join('.')){
            
                return method;
            }

            return null;
        }
        
        private scan_class     (qualifier:string, stack:string[], _class:typescript.api.Class) : typescript.api.ReflectedType {

            stack.push(_class.name)

            if(qualifier == stack.join('.')){
            
                return _class;
            }

            for(var n in _class.methods) {

                var reflected_type = this.scan_method( qualifier, stack, _class.methods[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            for(var n in _class.variables) {

                var reflected_type = this.scan_variable( qualifier, stack, _class.variables[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            stack.pop();

            return null;
        }

        private scan_interface ( qualifier:string, stack:string[], _interface:typescript.api.Interface) : typescript.api.ReflectedType {

            stack.push(_interface.name);

            if(qualifier == stack.join('.')){
            
                return _interface;
            }

            for(var n in _interface.methods) {

                var reflected_type = this.scan_method( qualifier, stack, _interface.methods[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            for(var n in _interface.variables) {

                var reflected_type = this.scan_variable( qualifier, stack, _interface.variables[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            stack.pop();

            return null;
            
        }

        private scan_import    ( qualifier:string, stack:string[], _import:typescript.api.Import) : typescript.api.ReflectedType {

            // do nothing......or....maybe run a compile here?   
            
            return null; 
        }

        private scan_module    ( qualifier:string, stack:string[], _module:typescript.api.Module) : typescript.api.ReflectedType {
            
            if(_module.name.indexOf('\"') == -1) {

                stack.push(_module.name); 
            }

            if(qualifier == stack.join('.')){
            
                return _module;
            }

            for(var n in _module.modules) {

                var reflected_type = this.scan_module( qualifier, stack, _module.modules[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            for(var n in _module.imports) {

                var reflected_type = this.scan_import( qualifier, stack, _module.imports[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            for(var n in _module.interfaces) {

                var reflected_type = this.scan_interface( qualifier, stack, _module.interfaces[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            } 
                  
            for(var n in _module.classes) {

                var reflected_type = this.scan_class( qualifier, stack, _module.classes[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            for(var n in _module.methods) {

                var reflected_type = this.scan_method( qualifier, stack, _module.methods[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            for(var n in _module.variables) {

                var reflected_type = this.scan_variable( qualifier, stack, _module.variables[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            if(_module.name.indexOf('\"') == -1) {

                stack.pop();
            }

            return null;
        }

        private scan_script    (qualifier:string, stack:string[], script:typescript.api.Script) : typescript.api.ReflectedType {
            
            for(var n in script.modules) {

                var reflected_type = this.scan_module( qualifier, stack, script.modules[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            for(var n in script.interfaces) {

                var reflected_type = this.scan_interface( qualifier, stack, script.interfaces[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            } 
                  
            for(var n in script.classes) {

                var reflected_type = this.scan_class( qualifier, stack, script.classes[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }

                
            }

            for(var n in script.methods) {

                var reflected_type = this.scan_method( qualifier, stack, script.methods[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            for(var n in script.variables) {

                var reflected_type = this.scan_variable( qualifier, stack, script.variables[n] );

                if(reflected_type) {
                
                    return reflected_type;
                }
            }

            return null;
        } 
    }
}