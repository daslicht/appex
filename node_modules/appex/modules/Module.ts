// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../interfaces.ts" />
/// <reference path="../references.ts" />
/// <reference path="../compiler/Reflection.ts" />
/// <reference path="ModuleExport.ts" />

module appex {

    export class Module implements IDisposable {
        
        public   exports     : appex.ModuleExport[];

        public   context     : any;

        constructor            (public javascript:string, public reflection:appex.Reflection) {
            
            this.load_context();

            this.load_exports();
        }

        public  get            (moduleExport:appex.ModuleExport) : any {

            var scope = this.context.exports;

            for(var n in moduleExport.scope) {
                
                scope = scope[moduleExport.scope[n]];
            }
            
            return scope[(<any>moduleExport.type).name];
        }
        
        private load_context   () : void {
            
            // create context
            this.context = {	

                __dirname   : node.path.dirname(process.mainModule.filename),

                __filename  : node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js"),	    

                global	    : global,

                process     : process,

                require     : require,	

                console     : console,

                exports     : {},
            };
            

            var script = node.vm.createScript( this.javascript, 'appex.module.js' );

            script.runInNewContext ( this.context );
        }
        
        private load_exports   () : void {
            
            this.exports    = [];

            var scope       = [];

            this.reflection.scripts.forEach((script) => {
                
                this.load_script(scope, script);
                
            });
        }
        
        private load_variable  (scope:string[], variable:typescript.api.Variable) : void {
            
            if(variable.isExported) {

                this.exports.push(new appex.ModuleExport(scope, variable));

            }
        }
        
        private load_parameter (scope:string[], parameter:typescript.api.Parameter) : void {
            
            // unused
        }

        private load_method    (scope:string[], method:typescript.api.Method) : void {
            
            if(method.isExported) {
                
                this.exports.push(new appex.ModuleExport(scope, method));

                method.parameters.forEach((obj) => { this.load_parameter(scope, obj); });

            }
        }
        
        private load_class     (scope:string[], _class:typescript.api.Class) : void {

            if(_class.isExported) {

                this.exports.push(new appex.ModuleExport(scope, _class));

                _class.methods.forEach    ((obj) => { this.load_method(scope, obj); });

                _class.variables.forEach  ((obj) => { this.load_variable(scope, obj); });
            }
        }

        private load_interface (scope:string[], _interface:typescript.api.Interface) : void {

            if(_interface.isExported) {

                this.exports.push(new appex.ModuleExport(scope, _interface));

                _interface.methods.forEach    ((obj) => { this.load_method(scope, obj); });

                _interface.variables.forEach  ((obj) => { this.load_variable(scope, obj); });
            }
        }

        private load_import    (scope:string[], _import:typescript.api.Import) : void {

            // do nothing...    
        }

        private load_module    (scope:string[], _module:typescript.api.Module) : void {
            
            if(_module.isExported) {

                if(_module.name.indexOf("\"") == -1)
                {
                    scope.push(_module.name);
                }

                _module.modules.forEach    ((obj) => { this.load_module(scope, obj); }); 

                _module.imports.forEach    ((obj) => { this.load_import(scope, obj); }); 

                _module.interfaces.forEach ((obj) => { this.load_interface(scope, obj); });  
     
                _module.classes.forEach    ((obj) => { this.load_class(scope, obj); }); 

                _module.methods.forEach    ((obj) => { this.load_method(scope, obj); }); 

                _module.variables.forEach  ((obj) => { this.load_variable(scope, obj); }); 

                if(_module.name.indexOf("\"") == -1)
                {    
                    scope.pop();
                }
            }
        }

        private load_script    (scope:string[], script:typescript.api.Script) : void {

            script.modules.forEach    ((obj) => { this.load_module(scope, obj); });
     
            script.interfaces.forEach ((obj) => { this.load_interface(scope, obj); }); 
    
            script.classes.forEach    ((obj) => { this.load_class(scope, obj); });
    
            script.methods.forEach    ((obj) => { this.load_method(scope, obj); });
    
            script.variables.forEach  ((obj) => { this.load_variable(scope, obj); });
        } 

        public dispose(): void {
    
            this.context = null; // does this work?
        }
    }
}