// Copyright (c) haydn paterson (sinclair) 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../interfaces.ts" />
/// <reference path="../references.ts" />
/// <reference path="../compiler/Reflection.ts" />

module appex.modules {

    export class ModuleExport {
        
        constructor(public module : appex.modules.Module, public type : typescript.api.ReflectedType) { }

        public accessor() : any {
            
            if(this.module != null) {

                if(this.module.context != null) {
                
                    if(this.module.context.exports != null) {
                    
                        var reference : any = this.module.context.exports;
            
                        var scope = this.type.scope;

                        if(scope.length > 0) {

                            if(scope[0].indexOf('"') !== -1) {
                    
                                scope = scope.slice(1);
                            }
                        }

                        for(var n in scope) {
                
                            reference = reference[scope[n]];

                            if(reference == null) {
                            
                                return null;
                            }

                        }
            
                        return reference[this.type.name];                          
                    }
                }
            }

            return null;
        }
    }

    export class Module implements IDisposable {
        
        public   exports     : appex.modules.ModuleExport[];

        public   context     : any;

        constructor (public javascript:string, public reflection:appex.Reflection) { // just pass a compilation result.
            
            this.load_context();

            this.load_exports();
        }
           
        private load_context   () : void {
            
            // create context
            this.context = {	

                __dirname   : node.path.dirname(process.mainModule.filename),

                __filename  : node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js"),	    

                global	    : global,

                process     : process,

                require     : require,	

                console     : console,

                exports     : {},

                module      : {}
            };
            
            var script = node.vm.createScript( this.javascript, 'appex.module.js' );

            script.runInNewContext ( this.context );
        }
        
        private load_exports   () : void {
            
            this.exports    = [];

            var scope       = [];

            this.reflection.scripts.forEach((script) => {
                
                this.load_script(scope, script);
                
            });
        }
        
        private load_variable  (variable:typescript.api.Variable) : void {
            
            if(variable.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, variable));

            }
        }
        
        private load_parameter (parameter:typescript.api.Parameter) : void {
            
            // unused
        }

        private load_method    (method:typescript.api.Method) : void {
            
            if(method.isExported) {
                
                this.exports.push(new appex.modules.ModuleExport(this, method));

                method.parameters.forEach((obj) => { this.load_parameter (obj); });

            }
        }
        
        private load_class     (_class:typescript.api.Class) : void {

            if(_class.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, _class));

                _class.methods.forEach    ((obj) => { this.load_method   (obj); });

                _class.variables.forEach  ((obj) => { this.load_variable (obj); });
            }
        }

        private load_interface ( _interface:typescript.api.Interface) : void {

            if(_interface.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, _interface));

                _interface.methods.forEach    ((obj) => { this.load_method   (obj); });

                _interface.variables.forEach  ((obj) => { this.load_variable (obj); });
            }
        }

        private load_import    (_import:typescript.api.Import) : void {

            // do nothing......or....maybe run a compile here?    
        }

        private load_module    (_module:typescript.api.Module) : void {
            
            if(_module.isExported) {

                _module.modules.forEach    ((obj) => { this.load_module    (obj); }); 

                _module.imports.forEach    ((obj) => { this.load_import    (obj); }); 

                _module.interfaces.forEach ((obj) => { this.load_interface (obj); });  
     
                _module.classes.forEach    ((obj) => { this.load_class     (obj); }); 

                _module.methods.forEach    ((obj) => { this.load_method    (obj); }); 

                _module.variables.forEach  ((obj) => { this.load_variable  (obj); });
            }
        }

        private load_script    (scope:string[], script:typescript.api.Script) : void {

            script.modules.forEach    ((obj) => { this.load_module    (obj); });
     
            script.interfaces.forEach ((obj) => { this.load_interface (obj); }); 
    
            script.classes.forEach    ((obj) => { this.load_class     (obj); });
    
            script.methods.forEach    ((obj) => { this.load_method    (obj); });
    
            script.variables.forEach  ((obj) => { this.load_variable  (obj); });
        } 

        public dispose(): void {
    
            this.context = null; // does this work?
        }
    }
}