// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../interfaces.ts" />
/// <reference path="../references.ts" />
/// <reference path="../compiler/CompilerResult.ts" />
/// <reference path="Reflection.ts" />

module appex.modules {

    export class ModuleExport {
        
        private _accessor:any;

        private _attribute:any;

        private _accessor_checked : boolean;

        private _attribute_checked : boolean;

        constructor(public module : appex.modules.Module, public type : typescript.api.ReflectedType) { 
        
            this._accessor          = null;

            this._accessor_checked  = false;

            this._attribute         = null;

            this._attribute_checked = false;
        }

        public attribute() : any {

            if(this._attribute_checked) 
            {    
                return this._attribute;
            }
            else 
            {
                var that = this;

                var lookup = (qualifier:string) => {
                    
                    for(var n in that.module.attributes) {
                    
                        if(n == qualifier) {

                            return that.module.attributes[n];
                        }
                    }
                }
                
                if(this.module != null) {

                    if(this.module.context != null) {
                
                        if(this.module.context.exports != null) {   
                        
                            if(this.module.attributes) {
                            
                                if( Object.prototype.toString.call( this.module.attributes ) === '[object Array]' ) {
                                    
                                    this._attribute = {};

                                    var accessor : any = this.module.context.exports;
            
                                    var scope = this.type.scope;

                                    if(scope.length > 0) {

                                        if(scope[0].indexOf('"') !== -1) {
                    
                                            scope = scope.slice(1);
                                        }
                                    }
                                    
                                    // cascade attribute.

                                    var qualifier_stack = [];

                                    for(var n in scope) {
                            
                                        accessor = accessor[scope[n]];

                                        if(accessor) 
                                        {
                                            qualifier_stack.push(scope[n]);

                                            var attribute = lookup(qualifier_stack.join('.'));

                                            if(attribute)
                                            {
                                                for(var n in attribute) {
                                                
                                                    this._attribute[n] = attribute[n];
                                                }
                                            }
                                        }
                                        else
                                        {
                                            return {}; // terminate early if we cannot resolve.
                                        }
                                    }
                                    
                                    // finally, resolve attribute on type.

                                    if(accessor[this.type.name]) {
                                        
                                        qualifier_stack.push(this.type.name);
                                        
                                        var attribute = lookup(qualifier_stack.join('.'));

                                        if(attribute)
                                        {
                                            for(var n in attribute) {
                                                
                                                this._attribute[n] = attribute[n];                                                
                                            }

                                            return this._attribute;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                this._attribute_checked = true;

                return {};
            }
        }

        public accessor() : any {
            
            if(this._accessor_checked) 
            {
                return this._accessor;
            }
            else 
            {
                if(this.module != null) {

                    if(this.module.context != null) {
                
                        if(this.module.context.exports != null) {
                    
                            var accessor : any = this.module.context.exports;
            
                            var scope = this.type.scope;

                            if(scope.length > 0) {

                                if(scope[0].indexOf('"') !== -1) {
                    
                                    scope = scope.slice(1);
                                }
                            }
                        
                            for(var n in scope) {
                            
                                accessor = accessor[scope[n]];

                                if(accessor == null) 
                                {
                                    this._accessor_checked = true;

                                    return null;
                                }
                            }

                            if(accessor[this.type.name]) {
                            
                                this._accessor = accessor[this.type.name];

                                return this._accessor;
                            }                
                        }
                    }
                }
            }

            this._accessor_checked = true;

            return null;
        }
    }

    export class Module implements IDisposable {
        
        public exports     : appex.modules.ModuleExport[];

        public context     : any;

        public javascript  : string;

        public declaration : string;

        public reflection  : appex.modules.Reflection;

        public diagnostics : typescript.api.Diagnostic[];

        public attributes  : any[];

        constructor (compilerResult:appex.compiler.CompilerResult) {  
            
            this.javascript  = compilerResult.javascript;
            
            this.declaration = compilerResult.declaration;

            this.diagnostics = compilerResult.diagnostics;

            this.reflection  = new appex.modules.Reflection(compilerResult.scripts);

            this.attributes  = [];

            this.load_context();

            this.load_exports();
        }
           
        private load_context   () : void {

            var that = this;

            // create context
            this.context = {	

                __dirname   : node.path.dirname(process.mainModule.filename),

                __filename  : node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js"),	    

                global	    : global,

                process     : process,

                require     : require,	

                console     : console,

                exports     : {},

                module      : {},
                
                attribute   : (qualifier:string, data?:any) => {

                    if(data) {

                        that.attributes[qualifier] = data;
                    }
                    else {

                        return that.attributes[qualifier];
                    }
                }
            };
            
            var script = require("vm").createScript( this.javascript, 'appex.module.js' );

            script.runInNewContext ( this.context );
        }
        
        private load_exports   () : void {
            
            this.exports    = [];

            var scope       = [];

            for(var n in this.reflection.scripts) {

                this.load_script(this.reflection.scripts[n])
            }
        }
        
        private load_variable  (variable:typescript.api.Variable) : void {
            
            if(variable.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, variable));

            }
        }
        
        private load_parameter (parameter:typescript.api.Parameter) : void {
            
            // unused
        }

        private load_method    (method:typescript.api.Method) : void {
            
            if(method.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, method));

                for(var n in method.parameters) {

                    this.load_parameter (method.parameters[n]);
                }
            }
        }
        
        private load_class     (_class:typescript.api.Class) : void {

            if(_class.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, _class));

                for(var n in _class.methods) {

                    this.load_method( _class.methods[n] );
                }

                for(var n in _class.variables) {

                    this.load_variable( _class.variables[n] );
                }
            }
        }

        private load_interface ( _interface:typescript.api.Interface) : void {

            if(_interface.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, _interface));

                for(var n in _interface.methods) {

                    this.load_method( _interface.methods[n] );
                }

                for(var n in _interface.variables) {

                    this.load_variable( _interface.variables[n] );
                }
            }
        }

        private load_import    (_import:typescript.api.Import) : void {

            // do nothing......or....maybe run a compile here?    
        }

        private load_module    (_module:typescript.api.Module) : void {
            
            if(_module.isExported) {

                for(var n in _module.modules) {

                    this.load_module( _module.modules[n] );
                }

                for(var n in _module.imports) {

                    this.load_import( _module.imports[n] );
                }

                for(var n in _module.interfaces) {

                    this.load_interface( _module.interfaces[n] );
                } 
                  
                for(var n in _module.classes) {

                    this.load_class( _module.classes[n] );
                }

                for(var n in _module.methods) {

                    this.load_method( _module.methods[n] );
                }

                for(var n in _module.variables) {

                    this.load_variable( _module.variables[n] );
                }
            }
        }

        private load_script    (script:typescript.api.Script) : void {

            for(var n in script.modules) {

                this.load_module( script.modules[n] );
            }

            for(var n in script.interfaces) {

                this.load_interface( script.interfaces[n] );
            } 
                  
            for(var n in script.classes) {

                this.load_class( script.classes[n] );
            }

            for(var n in script.methods) {

                this.load_method( script.methods[n] );
            }

            for(var n in script.variables) {

                this.load_variable( script.variables[n] );
            }
        } 

        public dispose(): void {
    
            this.context = null; // does this work?
        }
    }
}