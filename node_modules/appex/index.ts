/// <reference path="decl/references.ts" />
/// <reference path="activation/Runtime.ts" />
/// <reference path="activation/ActivationContext.ts" />
/// <reference path="servicehost/Host.ts" />

export function create_runtime(source:string, callback:(runtime:appex.activation.Runtime)=>void) : void {
    
    var runtime = new appex.activation.Runtime();

    runtime.start(source, (context, reflection) => {
        
        callback(runtime)
    });
}

export function create_activation_context(runtime:appex.activation.Runtime, callback:(activation_context:appex.activation.ActivationContext)=>void) : void {
    
    var activation = new appex.activation.ActivationContext(runtime);

    callback(activation);
}

export function create_service_host (activation_context:appex.activation.ActivationContext, callback:(activation_context:appex.servicehost.Host)=>void) : void {

    var service_host = new appex.servicehost.Host(activation_context);

    callback(service_host);
}

export function create(source:string, callback:(host:appex.servicehost.Host) => void): void {
    
    create_runtime(source, function(runtime) {
           
        create_activation_context(runtime, function(activation_context) {

            create_service_host(activation_context, function(service_host) {

                callback(service_host);
            
            });
        }); 
    });
}

export function listen(server:http.Server, source:string) : void {

    create(source, (host) => {
        
        var listeners = server.listeners('request');
         
        server.removeAllListeners('request');
        
        server.on('request', (request:http.ServerRequest, response:http.ServerResponse) => {
            
            for(var n in host.routes) { 
                
                var route = host.routes[n];

                if(route.path == request.url) {
                    
                    // bind in context

                    route.instance.context = {
                        
                        server   : server,
                        
                        request  : request,

                        response : response
                    };

                    // unpack the request.

                    var buffer = [];

                    request.on('data', (chunk) => { buffer.push(chunk); });

                    request.on('end', () => { 
                        
                        var input = null;

                        try
                        {
                            input = JSON.parse(buffer.join(''));
                        }
                        catch(e) 
                        {
                            
                        }

                        try 
                        {
                             

                            if(route.async)  // asynchronous calling convention
                            {
                                route.call(input, (output) => {
                                    
                                    var json = 'null'; 
                                    
                                    if(output)
                                    {
                                        json = JSON.stringify(output, null, ' ');
                                    }
                                    
                                    response.writeHead(200, { 'content-type' : 'application/json'});

                                    response.write(json);

                                    response.end();
                                });

                            }  
                            else  // synchronous calling convention
                            {  
                                var output = route.call(input);

                                var json = 'null'; 
                                    
                                if(output)
                                {
                                    json = JSON.stringify(output, null, ' ');
                                }

                                response.writeHead(200, { 'content-type' : 'application/json'});

                                response.write(json);

                                response.end();
                            }
                        } 
                        catch(error) 
                        {
                            response.writeHead(500, { 'content-type' : 'text/plain'});

                            response.write(error.toString());

                            response.end(); 
                            
                            return;                           
                        }
                    });

                    return;    
                }
            }

            // unable to locate route. defer to listeners.
            for(var n in listeners) {

                listeners[n](request, response);

            }
        });
    });
}







 

