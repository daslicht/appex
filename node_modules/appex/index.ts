// Copyright (c) 2013 haydn paterson (sinclair).  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="workers/Worker.ts" />
/// <reference path="compiler/Compiler.ts" />
/// <reference path="modules/Module.ts" />
/// <reference path="timers/StopWatch.ts" />
/// <reference path="web/media/Mime.ts" />
/// <reference path="web/routing/ModuleRouter.ts" />
/// <reference path="web/ServerOptions.ts" />
/// <reference path="web/IServer.ts" />
/// <reference path="web/DevelopmentServer.ts" />
/// <reference path="web/Server.ts" />

export function server(options:appex.web.IServerOptions) : appex.web.IServer {

    options = appex.web.NormalizeServerOptions(options);
    
    if(options.devmode) {

        return new appex.web.DevelopmentServer(options);
    }
    else {

        return new appex.web.Server(options);

    }    
}

export function middleware (options:appex.web.IServerOptions) : (request:http.ServerRequest, response:http.ServerResponse, next:() => void) => void {
    
    options = appex.web.NormalizeServerOptions(options);

    var server:appex.web.IServer;
    
    if(options.devmode) {

        server = new appex.web.DevelopmentServer(options);
    }
    else {

        server = new appex.web.Server(options);

    }
    
    return (request:http.ServerRequest, response:http.ServerResponse, next:() => void) => {
        
        server.handler(request, response, next);

    };
}

export function run (sourcefile:string, callback?:(context:any) => void ) : void {

    var compiler = new appex.compiler.Compiler();

    compiler.compile(sourcefile, ( result ) => {
        
        compiler.dispose();

        if(result.diagnostics.length > 0){
            
            result.diagnostics.forEach((diagnostic) => { process.stdout.write(diagnostic.toString() + '\n'); });
            
            return;
        }

        var module = new appex.modules.Module(result);
        
        if(callback){
        
            callback( module );
        }
        
    });
}


declare var exports;

exports.Worker           = appex.Worker;

exports.Compiler         = appex.compiler;

exports.modules          = appex.modules;

exports.web              = appex.web;


