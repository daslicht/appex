// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="workers/Worker.ts" />
/// <reference path="compilers/Compiler.ts" />
/// <reference path="modules/Module.ts" />
/// <reference path="modules/Handle.ts" />
/// <reference path="timers/StopWatch.ts" />
/// <reference path="runtime/Runtime.ts" />
/// <reference path="runtime/Route.ts" />

declare var exports;

exports.Worker           = appex.Worker;

exports.Compiler         = appex.Compiler;

exports.Module           = appex.Module;

exports.Handle           = appex.Handle;

exports.Runtime          = appex.Runtime;

exports.Route            = appex.Route;

export interface Options {

    source    : string;

    devmode ? : boolean;
}

function prepare_options (options:Options) : Options {

    options.devmode = (options.devmode != null) ? options.devmode : false;

    return options;
}

function handle_errors(diagnostics:typescript.api.Diagnostic[], response:http.ServerResponse) : void {

    response.writeHead(500, {'content-type' : 'text/plain'});

    diagnostics.forEach((diagnostic) => {
    
        response.write(diagnostic.text);

    });

    response.end();
}

var compiling = false;

export function runtime (options:Options) : (request:http.ServerRequest, response:http.ServerResponse, next:() => void) => void {
    
    options = prepare_options(options);
    
    if(options.source) {

        var compiler = new appex.Compiler();

        if(options.devmode) {
            
            process.stdout.write('-------------------------------------------------------\n');
            
            process.stdout.write('APPEX - DEVELOPER MODE\n');
            
            process.stdout.write('-------------------------------------------------------\n');

            return (request:http.ServerRequest, response:http.ServerResponse, next:()=>void) : void => {

                if(!compiling) {
                
                    compiling = true;
                    
                    process.stdout.write('building......');

                    var stopwatch = new appex.StopWatch();

                    stopwatch.start();
                    
                    compiler.compile(options.source, (result) => {
                        
                        compiling = false;

                        process.stdout.write('complete [' + stopwatch.stop().toString() + 'ms]\n')

                        if(result.errors.length > 0) {
                        
                            handle_errors(result.errors, response);

                            return;
                        }

                        var module  = new appex.Module(result.script, result.reflection);

                        var runtime = new appex.Runtime(module);

                        runtime.handler(request, response, next);
                    });
                }
            };
            
        } else {

            process.stdout.write('-------------------------------------------------------\n');
            
            process.stdout.write('APPEX\n');
            
            process.stdout.write('-------------------------------------------------------\n');

            var module   = null;

            var runtime  = null

            return (request:http.ServerRequest, response:http.ServerResponse, next:() => void) : void => {
                
                if(runtime == null) {

                    process.stdout.write('building......');

                    var stopwatch = new appex.StopWatch();

                    stopwatch.start();

                    compiler.compile(options.source, (result) => {

                        process.stdout.write('complete [' + stopwatch.stop().toString() + 'ms]\n')
                        
                        if(result.errors.length > 0) {
                        
                            handle_errors(result.errors, response);

                            return;
                        }

                        compiler.dispose();

                        module  = new appex.Module(result.script, result.reflection);

                        runtime = new appex.Runtime(module);

                        runtime.handler(request, response, next);
                    });

                } else {
                
                    runtime.handler(request, response, next);
                }
            };
        }
    }
}

