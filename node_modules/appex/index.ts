// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="workers/Worker.ts" />
/// <reference path="compilers/Compiler.ts" />
/// <reference path="modules/Module.ts" />
/// <reference path="modules/ModuleExport.ts" />
/// <reference path="timers/StopWatch.ts" />
/// <reference path="runtime/Runtime.ts" />
/// <reference path="runtime/Route.ts" />

declare var exports;

exports.Worker           = appex.Worker;

exports.Compiler         = appex.Compiler;

exports.Module           = appex.Module;

exports.ModuleExport     = appex.ModuleExport;

exports.Runtime          = appex.Runtime;

exports.Route            = appex.Route;

export interface Options {

    source    : string;

    devmode ? : boolean;
}

function handle_errors(diagnostics:typescript.api.Diagnostic[], response:http.ServerResponse) : void {

    response.writeHead(500, {'content-type' : 'text/plain'});

    diagnostics.forEach((diagnostic) => {
    
        var message = [diagnostic.path , " [" , (diagnostic.line_index + 1).toString(),  ":" , (diagnostic.char_index + 1).toString() , "] " , diagnostic.message, '\n'].join('');

        process.stdout.write( message );

        response.write(message);
    });

    response.end();
}



var compiling          = false;

var request_queue     = [];

export function runtime (options:Options) : (request:http.ServerRequest, response:http.ServerResponse, next:() => void) => void {
    
    var prepare_options = (options:Options) : Options => {

        options.devmode = (options.devmode != null) ? options.devmode : false;
    
        return options;
    }
    
    options = prepare_options(options);
    
    if(options.source) {

        var compiler = new appex.Compiler();

        if(options.devmode) {
            
            process.stdout.write('appex started - developer mode\n');
            
            // development mode

            return (request:http.ServerRequest, response:http.ServerResponse, next:()=>void) : void => {

                if(compiling) {
                    
                    

                    request_queue.push({request: request, response:response, next:next});
                
                } else { 
                    
                    request_queue.push({request: request, response:response, next:next});

                    compiling = true;
                    
                    var stopwatch = new appex.StopWatch();

                    stopwatch.start();
                    
                    compiler.compile(options.source, (result) => {
                        
                        compiling = false;

                        if(result.errors.length > 0) {
                        
                            handle_errors(result.errors, response);

                            return;
                        }

                        var module  = new appex.Module(result.script, result.reflection);

                        var runtime = new appex.Runtime(module);

                        while(request_queue.length > 0) {

                            var item = request_queue.pop();

                            if(runtime.handler(item.request, item.response, item.next)) {
                        
                                process.stdout.write('[' + stopwatch.stop().toString() + 'ms] ' + request.method + ' ' + request.url + '\n')

                            }

                        }
                    });
                }
            }; // end development mode
            
        } else {

            process.stdout.write('appex started\n');

            var module   = null;

            var runtime  = null;

            return (request:http.ServerRequest, response:http.ServerResponse, next:() => void) : void => {
                
                if(runtime == null) {

                    var stopwatch = new appex.StopWatch();

                    stopwatch.start();

                    compiler.compile(options.source, (result) => {
                        
                        if(result.errors.length > 0) {
                        
                            handle_errors(result.errors, response);

                            return;
                        }

                        compiler.dispose();

                        module  = new appex.Module(result.script, result.reflection);

                        runtime = new appex.Runtime(module);

                        if(runtime.handler(request, response, next)) {
                        
                            process.stdout.write('[' + stopwatch.stop().toString() + 'ms] ' + request.method + ' ' + request.url + '\n')

                        }
                    });
                } 
                else 
                {   
                    var stopwatch = new appex.StopWatch();

                    stopwatch.start();

                    if(runtime.handler(request, response, next)) {
                        
                        process.stdout.write('[' + stopwatch.stop().toString() + 'ms] ' + request.method + ' ' + request.url + '\n')
                    }
                }
            };
        }
    }
}

