/// <reference path="decl/references.ts" />


var module_stack = [];

var application = null;


function activate(_class:typescript.api.Class) : any 
{
    var scope = application;
    
    for(var i = 1; i < module_stack.length; i++) {

        try
        {
            console.log(module_stack[i])

            scope = scope[module_stack[i]];
        }
        catch(e) 
        {
            scope = null;

            break;
        }
        
    }

    console.log(scope)


    if(scope) 
    {    
        var instance = new scope[_class.name];

        instance.method('asd');
    }
}

function load_module(_module:typescript.api.Module) {

    //console.log(_module.name)

    module_stack.push(_module.name);

    _module.modules.forEach    (load_module); 

    _module.imports.forEach    (load_import);

    _module.interfaces.forEach (load_interface);  
     
    _module.classes.forEach    (load_class);

    _module.methods.forEach    (load_method);

    _module.variables.forEach  (load_variable);

    module_stack.pop();
}

function load_import(_import:typescript.api.Import) {

    
}

function load_class(_class:typescript.api.Class) {
    
    //console.log( _class.name);

    activate(_class);

    _class.methods.forEach    (load_method);

    _class.variables.forEach  (load_variable);
    
}

function load_interface(_interface:typescript.api.Interface) {

     //console.log(_interface.name)

    _interface.methods.forEach    (load_method);

    _interface.variables.forEach  (load_variable);
}

function load_method(method:typescript.api.Method) {

     //console.log(method.name)

    method.parameters.forEach(load_parameter);
}

function load_parameter(parameter:typescript.api.Parameter) {

    //console.log(parameter.name)
}

function load_variable(variable:typescript.api.Variable) {

    
}

function load_script(script:typescript.api.Script) {

    script.modules.forEach    (load_module);
     
    script.interfaces.forEach (load_interface);   
    
    script.classes.forEach    (load_class);
    
    script.methods.forEach    (load_method);
    
    script.variables.forEach  (load_variable);
}

function compute(scripts:typescript.api.Script[]) {
    
    scripts.forEach(load_script);
      
}

export function createServer(source:string) : http.Server {
    
    tsapi.reset();

    console.log(__dirname)

    var sources = [source]

    tsapi.resolve([source], (resolved) => {
            
        tsapi.compile(resolved, (compiled) =>{
            
            tsapi.run(compiled, null, (context) => {
                
                application = context;

                for(var n in compiled) {
                
                    load_script(compiled[n].reflection);

                }

            });
        });
    });



    var server = node.http.createServer((request, response) => {
    


    });

    return server;

}


 

