// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="workers/Worker.ts" />
/// <reference path="compiler/Compiler.ts" />
/// <reference path="modules/Module.ts" />
/// <reference path="modules/ModuleExport.ts" />
/// <reference path="timers/StopWatch.ts" />
/// <reference path="http/Router.ts" />
/// <reference path="http/Route.ts" />
/// <reference path="http/RuntimeOptions.ts" />
/// <reference path="http/Runtime.ts" />

declare var exports;

exports.Worker           = appex.Worker;

exports.Compiler         = appex.Compiler;

exports.Module           = appex.Module;

exports.ModuleExport     = appex.ModuleExport;

exports.Router           = appex.Router;

exports.Route            = appex.Route;

exports.Runtime          = appex.Runtime;

function prepare_options(options:appex.RuntimeOptions) : appex.RuntimeOptions {

    if(options.devmode == null) options.devmode = false;

    if(options.stdout == null)  options.stdout = process.stdout;

    if(options.stderr == null)  options.stderr = process.stderr;

    return options;
}

export function runtime (options:appex.RuntimeOptions) : (request:http.ServerRequest, response:http.ServerResponse, next:() => void) => void {
    
    options = prepare_options(options);

    var runtime = new appex.Runtime( options );
    
    return (request:http.ServerRequest, response:http.ServerResponse, next:() => void) => {
        
        runtime.request_handler(request, response, next);

    };
}

