/// <reference path="../interfaces.ts" />
/// <reference path="../references.ts" />

module appex.runtime {

    export class Handle {
        
        public scope    : string [];

        public type     : typescript.api.ReflectedType;

        constructor(scope:string[], type:typescript.api.ReflectedType) {
        
            this.scope = scope.slice(0);

            this.type  = type;
        }
    }

    export class Domain implements IDisposable {
        
        public script      : string;
        
        public reflection  : typescript.api.Reflection;

        public handles     : Handle[];

        private exports    : any;

        private sandbox    : any;

        constructor(script:string, reflection:typescript.api.Reflection) {
            
            this.script     = script;

            this.reflection = reflection;

            this.handles    = [];

            this.load_handles();

            this.start();
        }

        public start() : void {
            
            // create sandbox
            this.sandbox = {	

                __filename  : __filename,

                __dirname   : __dirname,	    

                global	    : global,

                process     : process,

                require     : require,	

                console     : console,

                exports     : {},
            };
            
            var script = node.vm.createScript( this.script, 'domain.js' );

            script.runInNewContext ( this.sandbox );

            this.exports = this.sandbox.exports;
        }
        
        private load_handles () : void {
            
            var scope = [];

            this.reflection.scripts.forEach((script) => {
                
                this.load_script(scope, script);
                
            });
        }
        
        private load_variable(scope:string[], variable:typescript.api.Variable) : void {
            
            // unused
        }
        
        private load_parameter(scope:string[], parameter:typescript.api.Parameter) : void {
            
            // unused
        }

        private load_method(scope:string[], method:typescript.api.Method) : void {
            
            if(method.isExported) {

                console.log('method => ' + method.name)
                
                this.handles.push(new Handle(scope, method));

                method.parameters.forEach((obj) => { this.load_parameter(scope, obj); });

            }
        }
        
        private load_class(scope:string[], _class:typescript.api.Class) : void {

            if(_class.isExported) {

                console.log('class => ' + _class.name)

                this.handles.push(new Handle(scope, _class));

                _class.methods.forEach    ((obj) => { this.load_method(scope, obj); });

                _class.variables.forEach  ((obj) => { this.load_variable(scope, obj); });
            }
        }

        private load_interface(scope:string[], _interface:typescript.api.Interface) : void {

            if(_interface.isExported) {

                console.log('interface => ' + _interface.name)

                this.handles.push(new Handle(scope, _interface));

                _interface.methods.forEach    ((obj) => { this.load_method(scope, obj); });

                _interface.variables.forEach  ((obj) => { this.load_variable(scope, obj); });
            }
        }

        private load_import(scope:string[], _import:typescript.api.Import) : void {

            // do nothing...    
        }

        private load_module(scope:string[], _module:typescript.api.Module) : void {
            
            if(_module.isExported) {

                if(_module.name.indexOf("\"") == -1)
                {
                    scope.push(_module.name);
                }

                console.log('module => ' + _module.name)

                _module.modules.forEach    ((obj) => { this.load_module(scope, obj); }); 

                _module.imports.forEach    ((obj) => { this.load_import(scope, obj); }); 

                _module.interfaces.forEach ((obj) => { this.load_interface(scope, obj); });  
     
                _module.classes.forEach    ((obj) => { this.load_class(scope, obj); }); 

                _module.methods.forEach    ((obj) => { this.load_method(scope, obj); }); 

                _module.variables.forEach  ((obj) => { this.load_variable(scope, obj); }); 

                if(_module.name.indexOf("\"") == -1)
                {    
                    scope.pop();
                }
            }
        }

        private load_script(scope:string[], script:typescript.api.Script) : void {

            console.log('script => ' + script.path)

            script.modules.forEach    ((obj) => { this.load_module(scope, obj); });
     
            script.interfaces.forEach ((obj) => { this.load_interface(scope, obj); }); 
    
            script.classes.forEach    ((obj) => { this.load_class(scope, obj); });
    
            script.methods.forEach    ((obj) => { this.load_method(scope, obj); });
    
            script.variables.forEach  ((obj) => { this.load_variable(scope, obj); });
        } 

        public dispose(): void {
    
            this.sandbox = null; // does this work?
        }
    }
}