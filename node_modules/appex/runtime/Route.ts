// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../references.ts" />
/// <reference path="../modules/Handle.ts" />

module appex 
{    
    export class Route {
           
        public handle     : appex.Handle;

        public type       : string; 

        public url        : string;
        
        public inputType  : typescript.api.Type; 

        public outputType : typescript.api.Type;
        
        constructor(handle : appex.Handle)
        {    
            this.handle = handle;

            this.url        = '';

            this.type       = 'unknown';

            this.inputType  = null;

            this.outputType = null;

            this.setup();
        }

        private setup() : void {
        
            if(this.handle.type.identifier == "method") 
            {
                this.setup_url  (<typescript.api.Method>this.handle.type);

                this.setup_type (<typescript.api.Method>this.handle.type);
            }
            else 
            {
                this.type = 'invalid';
            }
        }

        private setup_url (method:typescript.api.Method) : void  {
                
            var name = method.name.toLowerCase();

            if(this.handle.scope.length == 0) {
                
                this.url = name == 'index' ? "/" : '/' + name;

            } else  {    
                this.url =  name == 'index' ? ('/' + this.handle.scope.join('/')) : ('/' + this.handle.scope.join('/') + '/' + name);
            }
        }

        private setup_type(method:typescript.api.Method) : void {
            
            if(method.parameters.length == 1) {
            
                this.type = 'handler';

                return;

            }

            if(method.parameters.length == 3) {
            
                if(method.parameters[2].type.name == "Function") {
     
                    if(method.parameters[2].type.signature.parameters.length == 1) {
                        
                        if(method.parameters[2].type.signature.parameters[0].type.name != "Function") {
                            
                            this.type      = 'method';

                            this.inputType = method.parameters[1].type;
            
                            this.outputType = method.parameters[2].type.signature.parameters[0].type;

                            return;
                        }
                    }
                }   
            }

            this.type = 'invalid';
        }
    }
}