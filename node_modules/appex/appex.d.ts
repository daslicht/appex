declare module appex {
    interface IDisposable {
        dispose();
    }
}

declare module appex {
    interface CompilerResult {
        script: string;
        reflection: typescript.api.Reflection;
        errors: typescript.api.Diagnostic[];
    }
}
declare module appex {
    class StopWatch {
        private starttime;
        public start(): void;
        public stop(): number;
    }
}


declare module node {
    var http: http;
    var fs: fs;
    var vm: vm;
    var path: path;
    var child_process: child_process;
    var url: url;
}

declare module appex {
    class Handle {
        public scope: string[];
        public type: typescript.api.ReflectedType;
        constructor(scope: string[], type: typescript.api.ReflectedType);
    }
}


declare module appex {
    class Route {
        public handle: appex.Handle;
        public type: string;
        public url: string;
        public inputType: typescript.api.Type;
        public outputType: typescript.api.Type;
        constructor(handle: appex.Handle);
        private setup();
        private setup_url(method);
        private setup_type(method);
    }
}


declare module appex {
    class Worker<TRequest, TResponse> implements appex.IDisposable {
        public delegate: (request: TRequest, callback: (response: TResponse) => void) => void;
        private child_process;
        private waiters;
        private message_index;
        constructor(delegate: (request: TRequest, callback: (response: TResponse) => void) => void);
        private dispatch(message);
        public call(request: TRequest, callback: (response: TResponse) => void): void;
        public dispose(): void;
    }
}



declare module appex {
    class Compiler implements appex.IDisposable {
        private worker;
        constructor();
        public compile(filename: string, callback: (result: appex.CompilerResult) => void): void;
        public dispose(): void;
        private kernel(filename, callback);
    }
}



declare module appex {
    class Module implements appex.IDisposable {
        private script;
        private sandbox;
        public reflection: typescript.api.Reflection;
        public handles: appex.Handle[];
        public context: any;
        constructor(script: string, reflection: typescript.api.Reflection);
        public get(handle: appex.Handle): any;
        private load_context();
        private load_exports();
        private load_variable(scope, variable);
        private load_parameter(scope, parameter);
        private load_method(scope, method);
        private load_class(scope, _class);
        private load_interface(scope, _interface);
        private load_import(scope, _import);
        private load_module(scope, _module);
        private load_script(scope, script);
        public dispose(): void;
    }
}





declare module appex {
    class Runtime {
        public module: appex.Module;
        public routes: appex.Route[];
        constructor(module: appex.Module);
        public setup(): void;
        public read_request_object(request: http.ServerRequest, callback: (obj: any) => void): void;
        public write_response_object(output: any, response: http.ServerResponse, callback: () => void): void;
        public handler(request: http.ServerRequest, response: http.ServerResponse, next?: () => void): boolean;
    }
}







export interface Options {
    source: string;
    devmode?: boolean;
}
export declare function runtime(options: Options): (request: http.ServerRequest, response: http.ServerResponse, next: () => void) => void;
