declare module appex {
    interface IDisposable {
        dispose();
    }
    interface IDictionary<string, T> {
        [key: string]: T;
    }
}
declare module appex.workers {
    class Message<T> {
        public type: string;
        public messageid: number;
        public body: T;
    }
}
declare module appex.workers {
    class Waiter<Response> {
        public messageid: number;
        public delegate: (response: Response) => void;
        constructor(messageid: number, delegate: (response: Response) => void);
    }
}
declare module appex.timers {
    class StopWatch {
        private starttime;
        constructor();
        public start(): void;
        public stop(): number;
    }
}
declare module appex.web.media {
    class Mime {
        public lookup(filename: string): string;
    }
}


declare var node: {
    http: http;
    https: https;
    fs: fs;
    vm: vm;
    path: path;
    child_process: child_process;
    url: url;
    cookie: any;
};




declare module appex.workers {
    class Worker<TRequest, TResponse> implements appex.IDisposable {
        public delegate: (request: TRequest, callback: (response: TResponse) => void) => void;
        private child_process;
        private waiters;
        private message_index;
        constructor(delegate: (request: TRequest, callback: (response: TResponse) => void) => void);
        private dispatch(message);
        public call(request: TRequest, callback: (response: TResponse) => void): void;
        public dispose(): void;
    }
}


declare module appex.compiler {
    interface CompilerResult {
        javascript: string;
        declaration: string;
        scripts: typescript.api.Script[];
        diagnostics: typescript.api.Diagnostic[];
    }
}

declare module appex.modules {
    class Reflection {
        public scripts: typescript.api.Script[];
        constructor(scripts: typescript.api.Script[]);
    }
}

declare module appex.modules {
    interface IModuleExport {
        type: typescript.api.ReflectedType;
        accessor(): any;
        attribute(): any;
    }
    interface IModule {
        exports: IModuleExport[];
    }
}


declare module appex.web.app {
    interface IRequest {
        request: http.ServerRequest;
        method(): string;
        headers(): appex.IDictionary<string, string>;
    }
}


declare module appex.web.app {
    interface IResponse {
        response: http.ServerResponse;
        headers: appex.IDictionary<string, string>;
        send(data: string): void;
        send(status: number, data: string): void;
        serve(path: string, filepath: string): void;
        serve(status: number, path: string, filepath: string): void;
        json(obj: any): void;
        json(status: number, obj: any): void;
        jsonp(obj: any): void;
        jsonp(status: number, obj: any): void;
        jsonp(status: number, obj: any, callback: string): void;
    }
}

declare module appex.web {
    interface IServerOptions {
        program: string;
        devmode?: boolean;
        logging?: boolean;
        protocol?: string;
        context?: any;
        stdout?: WritableStream;
        stderr?: WritableStream;
    }
    function NormalizeServerOptions(options: IServerOptions): IServerOptions;
}


declare module appex.web {
    interface IServer {
        options?: web.IServerOptions;
        listen(port: number): void;
        handler(request: http.ServerRequest, response: http.ServerResponse, next?: Function): void;
    }
}



declare module appex.web.app {
    class Request implements app.IRequest {
        public request: http.ServerRequest;
        constructor(request: http.ServerRequest);
        public method(): string;
        public headers(): appex.IDictionary<string, string>;
    }
}


declare module appex.web.app {
    class Response implements app.IResponse {
        public response: http.ServerResponse;
        public headers: appex.IDictionary<string, string>;
        constructor(response: http.ServerResponse);
        public send(...params: any[]): void;
        public serve(...params: any[]): void;
        public json(...params: any[]): void;
        public jsonp(...params: any[]): void;
    }
}


declare module appex.web {
    class Waiter {
        public request: http.ServerRequest;
        public response: http.ServerResponse;
        public next: Function;
        public stopwatch: appex.timers.StopWatch;
        constructor(request: http.ServerRequest, response: http.ServerResponse, next?: Function);
    }
}



declare module appex.compiler {
    class Compiler implements appex.IDisposable {
        private worker;
        constructor();
        public compile(filename: string, callback: (result: compiler.CompilerResult) => void): void;
        public dispose(): void;
        private kernel(filename, callback);
    }
}





declare module appex.modules {
    class ModuleExport implements modules.IModuleExport {
        public module: Module;
        public type: typescript.api.ReflectedType;
        private _accessor;
        private _attribute;
        private _accessor_checked;
        private _attribute_checked;
        constructor(module: Module, type: typescript.api.ReflectedType);
        public attribute(): any;
        public accessor(): any;
    }
    class Module implements modules.IModule, appex.IDisposable {
        public exports: ModuleExport[];
        public context: any;
        public javascript: string;
        public declaration: string;
        public reflection: modules.Reflection;
        public diagnostics: typescript.api.Diagnostic[];
        public attributes: any[];
        constructor(compilerResult: appex.compiler.CompilerResult);
        private load_vm();
        private load_exports();
        private load_variable(variable);
        private load_parameter(parameter);
        private load_method(method);
        private load_class(_class);
        private load_interface(_interface);
        private load_import(_import);
        private load_module(_module);
        private load_script(script);
        public dispose(): void;
    }
}



declare module appex.web.app {
    interface IApp {
        server: http.Server;
        request: app.IRequest;
        response: app.IResponse;
        next: Function;
        module: appex.modules.IModule;
        router: web.routing.IRouter;
        attribute: any;
    }
}


declare module appex.web.routing {
    interface IRoute {
        match(request: http.ServerRequest): boolean;
        handler(app: web.app.IApp, request: http.ServerRequest, response: http.ServerResponse): boolean;
    }
}



declare module appex.web.routing {
    class ModuleIndexRoute implements routing.IRoute {
        public moduleExport: appex.modules.IModuleExport;
        public pathname: string;
        constructor(moduleExport: appex.modules.IModuleExport);
        public match(request: http.ServerRequest): boolean;
        public handler(app: web.app.IApp, request: http.ServerRequest, response: http.ServerResponse): boolean;
        private initialize();
    }
}



declare module appex.web.routing {
    class ModuleNamedRoute implements routing.IRoute {
        public moduleExport: appex.modules.IModuleExport;
        public pathname: string;
        constructor(moduleExport: appex.modules.IModuleExport);
        public match(request: http.ServerRequest): boolean;
        public handler(app: web.app.IApp, request: http.ServerRequest, response: http.ServerResponse): boolean;
        private initialize();
    }
}



declare module appex.web.routing {
    class ModuleWildcardRoute implements routing.IRoute {
        public moduleExport: appex.modules.IModuleExport;
        public regexps: RegExp[];
        constructor(moduleExport: appex.modules.IModuleExport);
        public match(request: http.ServerRequest): boolean;
        public handler(app: web.app.IApp, request: http.ServerRequest, response: http.ServerResponse): boolean;
        private initialize();
        private arguments(url);
    }
}


declare module appex.web.routing {
    interface IRouter {
        routes: routing.IRoute[];
        handler(app: web.app.IApp, request: http.ServerRequest, response: http.ServerResponse): boolean;
    }
}






declare module appex.web.app {
    class App implements app.IApp {
        public server: http.Server;
        public request: app.IRequest;
        public response: app.IResponse;
        public next: Function;
        public module: appex.modules.IModule;
        public router: web.routing.IRouter;
        public attribute: any;
        public mime: web.media.Mime;
        constructor(server: http.Server, serverRequest: http.ServerRequest, serverResponse: http.ServerResponse, next: Function, module: appex.modules.IModule, router: web.routing.IRouter);
    }
}





declare module appex.web.routing {
    class ModuleRouter implements routing.IRouter {
        public module: appex.modules.IModule;
        public routes: routing.IRoute[];
        constructor(module: appex.modules.IModule);
        public handler(app: web.app.IApp, request: http.ServerRequest, response: http.ServerResponse): boolean;
        private initialize();
        private resolve_route_from_export(moduleExport);
        private validate_wildcard_signature(method);
        private validate_index_signature(method);
        private validate_named_signature(method);
    }
}











declare module appex.web {
    class DevelopmentServer implements web.IServer, appex.IDisposable {
        public options: web.IServerOptions;
        private server;
        private compiler;
        private mime;
        private module;
        private router;
        private waiters;
        private compiling;
        constructor(options: web.IServerOptions);
        public listen(port: number): void;
        public handler(request: http.ServerRequest, response: http.ServerResponse, next?: Function): void;
        private load_app_context(waiter);
        private compile(callback);
        private errors(diagnostics);
        public dispose(): void;
    }
}











declare module appex.web {
    class Server implements web.IServer, appex.IDisposable {
        public options: web.IServerOptions;
        private server;
        private compiler;
        private mime;
        private module;
        private router;
        private waiters;
        private compiled;
        private compiling;
        constructor(options: web.IServerOptions);
        public listen(port: number): void;
        public handler(request: http.ServerRequest, response: http.ServerResponse, next?: Function): void;
        private load_app_context(waiter);
        private compile(callback);
        private errors(diagnostics);
        public dispose(): void;
    }
}












