declare module appex {
    interface IDisposable {
        dispose();
    }
}
declare module appex {
    class StopWatch {
        private starttime;
        public start(): void;
        public stop(): number;
    }
}
declare module appex.web.media {
    class Mime {
        public lookup(filename: string): string;
    }
}
declare module appex.web {
    interface IServer {
        handler(request: http.ServerRequest, response: http.ServerResponse, next?: () => void): void;
    }
}


declare module node {
    var http: http;
    var fs: fs;
    var vm: vm;
    var path: path;
    var child_process: child_process;
    var url: url;
}

declare module appex {
    class Reflection {
        public scripts: typescript.api.Script[];
        constructor(scripts: typescript.api.Script[]);
    }
}



declare module appex.modules {
    class ModuleExport {
        public module: Module;
        public type: typescript.api.ReflectedType;
        constructor(module: Module, type: typescript.api.ReflectedType);
        public accessor(): any;
    }
    class Module implements appex.IDisposable {
        public javascript: string;
        public reflection: appex.Reflection;
        public exports: ModuleExport[];
        public context: any;
        constructor(javascript: string, reflection: appex.Reflection);
        private load_context();
        private load_exports();
        private load_variable(variable);
        private load_parameter(parameter);
        private load_method(method);
        private load_class(_class);
        private load_interface(_interface);
        private load_import(_import);
        private load_module(_module);
        private load_script(scope, script);
        public dispose(): void;
    }
}

declare module appex.web.routing {
    interface IRoute {
        match(request: http.ServerRequest): boolean;
        handler(context: any, request: http.ServerRequest, response: http.ServerResponse, next?: () => void): boolean;
    }
}


declare module appex.web.routing {
    class ModuleGenericRoute implements routing.IRoute {
        public moduleExport: appex.modules.ModuleExport;
        public pathname: string;
        constructor(moduleExport: appex.modules.ModuleExport);
        public match(request: http.ServerRequest): boolean;
        public handler(context: any, request: http.ServerRequest, response: http.ServerResponse, next?: () => void): boolean;
        private initialize();
    }
}


declare module appex.web.routing {
    class ModuleIndexRoute implements routing.IRoute {
        public moduleExport: appex.modules.ModuleExport;
        public pathname: string;
        constructor(moduleExport: appex.modules.ModuleExport);
        public match(request: http.ServerRequest): boolean;
        public handler(context: any, request: http.ServerRequest, response: http.ServerResponse, next?: () => void): boolean;
        private initialize();
    }
}



declare module appex.web.routing {
    class ModuleJsonRoute implements routing.IRoute {
        public moduleExport: appex.modules.ModuleExport;
        public pathname: string;
        public requestType: typescript.api.Type;
        public responseType: typescript.api.Type;
        constructor(moduleExport: appex.modules.ModuleExport);
        public match(request: http.ServerRequest): boolean;
        public handler(context: any, request: http.ServerRequest, response: http.ServerResponse, next?: () => void): boolean;
        private read_request(request, callback);
        private write_response(obj, response);
        private initialize();
    }
}


declare module appex.web.routing {
    class ModuleWildcardRoute implements routing.IRoute {
        public moduleExport: appex.modules.ModuleExport;
        public regexp: RegExp;
        constructor(moduleExport: appex.modules.ModuleExport);
        public match(request: http.ServerRequest): boolean;
        public handler(context: any, request: http.ServerRequest, response: http.ServerResponse, next?: () => void): boolean;
        private initialize();
        private arguments(url);
    }
}

declare module appex.web {
    interface IServerOptions {
        sourcefile: string;
        devmode?: boolean;
        logging?: boolean;
        context?: any;
        stdout?: WritableStream;
        stderr?: WritableStream;
    }
    function NormalizeServerOptions(options: IServerOptions): IServerOptions;
}


declare module appex.web {
    class ServerRequest {
        public request: http.ServerRequest;
        public response: http.ServerResponse;
        public next: () => void;
        public stopwatch: appex.StopWatch;
        constructor(request: http.ServerRequest, response: http.ServerResponse, next: () => void);
    }
}


declare module appex {
    class Worker<TRequest, TResponse> implements appex.IDisposable {
        public delegate: (request: TRequest, callback: (response: TResponse) => void) => void;
        private child_process;
        private waiters;
        private message_index;
        constructor(delegate: (request: TRequest, callback: (response: TResponse) => void) => void);
        private dispatch(message);
        public call(request: TRequest, callback: (response: TResponse) => void): void;
        public dispose(): void;
    }
}



declare module appex {
    interface CompilerResult {
        javascript: string;
        reflection: appex.Reflection;
        diagnostics: typescript.api.Diagnostic[];
    }
}


declare module appex.web.routing {
    interface IRouter {
        routes: routing.IRoute[];
        handler(context: any, request: http.ServerRequest, response: http.ServerResponse, next?: () => void): boolean;
    }
}



declare module appex {
    class Compiler implements appex.IDisposable {
        private worker;
        constructor();
        public compile(filename: string, callback: (result: appex.CompilerResult) => void): void;
        public dispose(): void;
        private kernel(filename, callback);
    }
}






declare module appex.web.routing {
    class ModuleRouter implements routing.IRouter {
        public module: appex.modules.Module;
        public routes: routing.IRoute[];
        constructor(module: appex.modules.Module);
        public handler(context: any, request: http.ServerRequest, response: http.ServerResponse, next?: () => void): boolean;
        private initialize();
        private resolve_route_from_export(moduleExport);
        private validate_wildcard_signature(method);
        private validate_index_signature(method);
        private validate_json_signature(method);
        private validate_generic_signature(method);
    }
}








declare module appex.web {
    class DevelopmentServer implements web.IServer, appex.IDisposable {
        public options: web.IServerOptions;
        private server;
        private compiler;
        private module;
        private router;
        private requests;
        private compiling;
        constructor(options: web.IServerOptions);
        public listen(port: number): void;
        public handler(request: http.ServerRequest, response: http.ServerResponse, next?: () => void): void;
        private load_context(request, response);
        private compile(callback);
        private errors(diagnostics);
        public dispose(): void;
    }
}








declare module appex.web {
    class Server implements web.IServer, appex.IDisposable {
        public options: web.IServerOptions;
        private server;
        private compiler;
        private module;
        private router;
        private requests;
        private compiled;
        private compiling;
        constructor(options: web.IServerOptions);
        public listen(port: number): void;
        public handler(request: http.ServerRequest, response: http.ServerResponse, next?: () => void): void;
        private load_context(request, response);
        private compile(callback);
        private errors(diagnostics);
        public dispose(): void;
    }
}










export declare function server(options: appex.web.IServerOptions): appex.web.IServer;
export declare function middleware(options: appex.web.IServerOptions): (request: http.ServerRequest, response: http.ServerResponse, next: () => void) => void;
export declare function run(sourcefile: string, callback?: (context: any) => void): void;
