declare module appex {
    interface IDisposable {
        dispose();
    }
}

declare module appex {
    interface CompilerResult {
        errors: string[];
        script: string;
        reflection: typescript.api.Reflection;
    }
}


declare module node {
    var http: http;
    var fs: fs;
    var vm: vm;
    var path: path;
    var child_process: child_process;
}

declare module appex {
    class Handle {
        public scope: string[];
        public type: typescript.api.ReflectedType;
        constructor(scope: string[], type: typescript.api.ReflectedType);
    }
}

declare module appex {
    class Route {
        public url: string;
        public instance: any;
        public method: string;
        public requestType: typescript.api.Type;
        public responseType: typescript.api.Type;
        public call(input: any, callback: (output: any) => void): any;
    }
}

declare module appex {
    class Controller {
        public server: http.Server;
        public request: http.ServerRequest;
        public response: http.ServerResponse;
        constructor();
    }
}

declare module appex {
    class Global {
        public routes: string[];
        constructor();
    }
}


declare module appex {
    class Worker<TRequest, TResponse> implements appex.IDisposable {
        public delegate: (request: TRequest, callback: (response: TResponse) => void) => void;
        private child_process;
        private waiters;
        private message_index;
        constructor(delegate: (request: TRequest, callback: (response: TResponse) => void) => void);
        private dispatch(message);
        public call(request: TRequest, callback: (response: TResponse) => void): void;
        public dispose(): void;
    }
}



declare module appex {
    class Compiler implements appex.IDisposable {
        private worker;
        constructor();
        public compile(filename: string, callback: (result: appex.CompilerResult) => void): void;
        public dispose(): void;
        private kernel(filename, callback);
    }
}



declare module appex {
    class Module implements appex.IDisposable {
        private script;
        private reflection;
        private sandbox;
        public handles: appex.Handle[];
        public context: any;
        constructor(script: string, reflection: typescript.api.Reflection);
        public get(handle: appex.Handle): any;
        private load_context();
        private load_exports();
        private load_variable(scope, variable);
        private load_parameter(scope, parameter);
        private load_method(scope, method);
        private load_class(scope, _class);
        private load_interface(scope, _interface);
        private load_import(scope, _import);
        private load_module(scope, _module);
        private load_script(scope, script);
        public dispose(): void;
    }
}






declare module appex {
    class Host implements appex.IDisposable {
        public server: http.Server;
        public compiler: appex.Compiler;
        public modules: appex.Module[];
        public routes: appex.Route[];
        constructor();
        public bind(server: http.Server): void;
        private read_body(request, callback);
        private error_handler(error, request, response);
        public metadata(request: http.ServerRequest, response: http.ServerResponse): void;
        private request_handler(request, response, callback);
        public require(source: string, callback?: (module: appex.Module) => void): void;
        public dispose(): void;
    }
}








