/// <reference path="decl/references.ts" />
/// <reference path="Runtime.ts" />

module appex {
    
    export class Instance {
    
        public name      : string;

        public typeinfo  : typescript.api.Class;

        public ctor      : any;
        
        constructor() {
        
            
        }
    }

    export class Activator
    {
        private runtime     : appex.Runtime;

        public instances    : Array<Instance>;
        
        private scope_stack : Array<string>;

        constructor(runtime:appex.Runtime)
        {
            this.runtime     = runtime;

            this.scope_stack = new Array<string>();

            this.instances   = new Array<Instance>();

            this.runtime.scripts.forEach((script)=>{
                
               this.load_script(script);

            });
        }
        
        public load_instance(_class:typescript.api.Class) : void {
        
            var scope = this.runtime.context;
    
            for(var i = 1; i < this.scope_stack.length; i++) { // skip first.

                try
                {
                    scope = scope[this.scope_stack[i]];
                }
                catch(e) 
                {
                    scope = null;

                    break;
                }
        
            }
            
            if(scope) 
            {   
                var instance  = new Instance();

                instance.name     = this.scope_stack.splice(1, 1).join('.') + '.' + _class.name;

                instance.ctor     = scope[_class.name];

                instance.typeinfo = _class;

                this.instances.push(instance);   
            }
        }


        private load_module(_module:typescript.api.Module) 
        {
            this.scope_stack.push(_module.name);
            
                _module.modules.forEach    ((obj) => { this.load_module(obj); }); 

                _module.imports.forEach    ((obj) => { this.load_import(obj); }); 

                _module.interfaces.forEach ((obj) => { this.load_interface(obj); });  
     
                _module.classes.forEach    ((obj) => { this.load_class(obj); }); 

                _module.methods.forEach    ((obj) => { this.load_method(obj); }); 

                _module.variables.forEach  ((obj) => { this.load_variable(obj); }); 

            this.scope_stack.pop();
        }

        private load_import(_import:typescript.api.Import) 
        {
            
        }

        private load_class(_class:typescript.api.Class) 
        {
            this.load_instance(_class);

            _class.methods.forEach    ((obj) => { this.load_method(obj); });

            _class.variables.forEach  ((obj) => { this.load_variable(obj); });
        }

        private load_interface(_interface:typescript.api.Interface) 
        {    
            _interface.methods.forEach    ((obj) => { this.load_method(obj); });

            _interface.variables.forEach  ((obj) => { this.load_variable(obj); });
        }

        private load_method(method:typescript.api.Method) 
        {    
            method.parameters.forEach((obj) => { this.load_parameter(obj); });
        }

        private load_parameter(parameter:typescript.api.Parameter) 
        {
            
        }

        private load_variable(variable:typescript.api.Variable) 
        {
            
        }

        private load_script(script:typescript.api.Script) {

            script.modules.forEach    ((obj) => { this.load_module(obj); });
     
            script.interfaces.forEach ((obj) => { this.load_interface(obj); }); 
    
            script.classes.forEach    ((obj) => { this.load_class(obj); });
    
            script.methods.forEach    ((obj) => {this.load_method(obj); });
    
            script.variables.forEach  ((obj) => {this.load_variable(obj); });
        }
    }
}