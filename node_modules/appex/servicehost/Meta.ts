/// <reference path="../activation/ActivationContext.ts" />

module appex.servicehost {
    
    export class Field 
    {
        public name:string;

        public type:string;
    }

    export class Type 
    {
        public name   : string;

        public fields : appex.servicehost.Field[];

        constructor() 
        {
            this.fields = [];
        }
    }
    
    export class Operation 
    {
        public name   : string;

        public input  : string;

        public output : string;
    }

    export class Service 
    {    
        public name       : string;

        public operations : Operation[];

        constructor() 
        {    
            this.operations = [];
        }

    }
    
    export class Meta {
       
        public activation : appex.activation.ActivationContext;

        public types      : Type    [];

        public services   : Service [];
        
        constructor(activation:appex.activation.ActivationContext) {

            this.activation = activation;
            
            this.types      = [];

            this.services   = [];

            activation.handles.forEach((handle) => {
            
                var service = this.load_service(handle);

                this.services.push(service);
            }); 

            delete this.activation;
        }

        private load_service(handle:appex.activation.ActivationHandle) : appex.servicehost.Service {
        
            var type = this.activation.runtime.reflection.locate(handle.typename);

            if(type) 
            {
                var service    = new appex.servicehost.Service();

                service.name   = type.typename;
                
                var typeref    = <typescript.api.Interface>type.typeinfo;

                typeref.methods.forEach((method) => {
                    
                    var operation = this.load_operation(method);

                    service.operations.push(operation);

                }); 

                return service;
            }                     
        }

        private load_operation(method:typescript.api.Method) : appex.servicehost.Operation {
        
            var operation    = new appex.servicehost.Operation();

            operation.name   = method.name;

            operation.input  = 'any';

            operation.output = 'any';

            // if there is one parameter, it is assumed to be synchronous.

            if(method.parameters.length == 1) {

                operation.input  =  this.resolve_type(method.parameters[0].type.name);

                operation.output =  this.resolve_type(method.returns.name);
            }

            // if there are two parameters, its asynchronous.

            if(method.parameters.length == 2) {
                            
                if(method.parameters[1].type.name == "Function") {

                    operation.input  = this.resolve_type(method.parameters[0].type.name);

                    if(method.parameters[1].type.signature.parameters.length > 0) {

                        operation.output = this.resolve_type(method.parameters[1].type.signature.parameters[0].type.name);
                    }
                    else
                    {
                        operation.output = "void";
                    }
                }
            }
            
            return operation;             
        }


        private resolve_type (typename:string) : string 
        {    
            // return primitives.
            if( typename == 'string' || typename == 'number' || typename == 'any'    || typename == 'Date'   || typename == 'void') 
            {
                return typename;
            }

            // return existing types.
            for(var n in this.types) 
            {
                if(this.types[n].name == typename) 
                {
                    return this.types[n].name;
                }
            }

            // attempt to load the type.
            var typeinfo = this.activation.runtime.reflection.locate(typename);

            if(typeinfo) 
            {
                var type      = new appex.servicehost.Type();

                type.name     = typeinfo.typename;

                typeinfo.typeinfo.variables.forEach((variable) => {
                
                     var field = new appex.servicehost.Field();

                    field.name = variable.name;

                    field.type = this.resolve_type( variable.type.name );

                    type.fields.push(field);
                });

                this.types.push(type);

                return type.name;
            }
            else
            {
                return "any";
            }
        }
    }
}