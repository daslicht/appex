/// <reference path="../activation/ActivationContext.ts" />

module appex.servicehost {
    
    export class Field 
    {
        public name:string;

        public type:string;
    }

    export class Type 
    {
        public name   : string;

        public fields : appex.servicehost.Field[];

        constructor() 
        {
            this.fields = [];
        }
    }
    
    export class Method 
    {
        public name   : string;

        public input  : string;

        public output : string;
    }

    export class Service 
    {    
        public name    : string;

        public methods : Method[];

        constructor() 
        {    
            this.methods = [];
        }

    }
    
    export class Meta {
       
        public activation : appex.activation.ActivationContext;

        public types      : Type[];

        public services   : Service[];
        
        constructor(activation:appex.activation.ActivationContext) {

            this.activation = activation;
            
            this.types      = [];

            this.services   = [];

            activation.handles.forEach((handle)=> {
            
                var type = this.activation.runtime.reflection.gettype(handle.typename);

                if(type) {

                    var _service = new appex.servicehost.Service();

                    _service.name = type.typename;
                    
                    var _interface = <typescript.api.Interface>type.typeinfo;

                    _interface.methods.forEach((method)=>{
                    
                        var _method    = new appex.servicehost.Method();

                        _method.name   = method.name;

                        _method.input  = 'any';

                        _method.output = 'any';

                        if(method.parameters.length == 1) {

                            _method.input  =  method.parameters[0].type.name;

                            _method.output =  method.returns.name;
                        }

                        // if there are two parameters, its asynchronous.

                        if(method.parameters.length == 2) {
                            
                            if(method.parameters[1].type.name == "Function") {

                                _method.input  = method.parameters[0].type.name;

                                if(method.parameters[1].type.signature.parameters.length > 0) {

                                    _method.output = method.parameters[1].type.signature.parameters[0].type.name;
                                }
                                else
                                {
                                    _method.output = "void";
                                }
                            }
                        }

                        this.loadtype(_method.input);

                        this.loadtype(_method.output);

                        _service.methods.push(_method);
                    }); 

                    this.services.push(_service);
                }         
            }); 

            delete this.activation;
        }

        private loadtype(typename:string) : void {
            
            // ignore primitives
            if( typename == 'string' ||
                typename == 'number' ||
                typename == 'any'    ||
                typename == 'Date'   ||
                typename == 'void') return;

            var type = this.activation.runtime.reflection.gettype(typename);

            if(type) {
            
                var _interface = <typescript.api.Interface>type.typeinfo;

                var _type  = new appex.servicehost.Type();

                _type.name = _interface.name;

                _interface.variables.forEach((variable) => {
                
                    var _field = new appex.servicehost.Field();

                    _field.name = variable.name;

                    _field.type = variable.type.name;

                    _type.fields.push(_field);

                    this.loadtype(_type.name);
                });

                this.types.push(_type);

                return;
            }

            return null;
        }
    }
}