// Copyright (c) sinclair 2013.  All rights reserved.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="../interfaces.ts" />
/// <reference path="../workers/Worker.ts" />
/// <reference path="CompilerResult.ts" />

module appex {

    export class Compiler implements appex.IDisposable {
        
        private worker: appex.Worker<string, appex.CompilerResult>;

        constructor() {
            
            this.worker = new appex.Worker<string, appex.CompilerResult>( this.kernel );
            
        }
        
        public compile(filename:string, callback:(result:appex.CompilerResult)=>void) : void {
        
            this.worker.call(filename, callback);

        }

        public dispose() : void {
        
            this.worker.dispose();

        }

        // code executed in worker process.
        private kernel (filename:string, callback:(result:appex.CompilerResult)=>void) : void {
            
            var gather_diagnostics = function(units:typescript.api.Unit[]) : typescript.api.Diagnostic[] {
                
                var diagnostics = [];

                units.forEach((unit) => {
                    
                    unit.diagnostics.forEach((diagnostic) => {

                        diagnostics.push(diagnostic);
                    });
                });

                return diagnostics;
            }
            
            var typescript = <typescript.api>require('typescript.api');

            // typescript.reset(); 

            var errors = [];

            typescript.resolve([filename], (resolved)=> {
                
                if(!typescript.check(resolved)) {

                    callback({
                        
                        javascript  : '',
                        
                        reflection  : null,

                        diagnostics : gather_diagnostics(resolved)
                    });

                    return;
                }

                typescript.compile(resolved, (compiled)=> {
                    
                    if(!typescript.check(compiled)) {

                        callback({
                        
                            javascript  : '',
                        
                            reflection  : null,

                            diagnostics : gather_diagnostics(compiled)
                        });

                        return; 
                    }                   

                    // create compiler result.
                    
                    var content    = [];

                    var reflection = {
                    
                        scripts: []
                    };

                    compiled.forEach((unit) => {
                    
                        content.push(unit.content);

                        reflection.scripts.push(unit.script);
                    });
                    
                    callback({
                        
                        javascript   : content.join('\n'),
                        
                        reflection   : <typescript.api.Reflection>reflection,

                        diagnostics  : []
                    });
                });
            });
        }
    }
}